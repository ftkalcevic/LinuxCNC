/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// C version for linuxcnc adapted by \author Frank Tkalcevic
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2019-03-25 17:44:59.643302
///
///    /usr/local/bin/openrave.py --database inversekinematics --robot=./moveolike2.xml --iktype=TranslationDirection5D --freejoint=WristR --perftiming=1000 --outputlang=c 
///
/// To compile with gcc:
///     gcc ik.c -lm
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp

#define IKFAST_HAS_LIBRARY
#define IKFAST_NUM_DOF 4
#define IKFAST_NUM_JOINTS 6
#define IKFAST_NUM_FREE_VARS 1

// For a standalone binary
#ifndef IKFAST_NO_MAIN
    #define j0 math_h_j0
    #define j1 math_h_j1

    #include <math.h>
    #include <complex.h>
    #include <stdlib.h>
    #include <stdio.h>

    #undef j0
    #undef j1

    #define rtapi_exit  exit
    #define rtapi_print printf
#endif

#include "ikfast_c.h" // found inside share/openrave-X.Y/python/ikfast_c.h

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { rtapi_print( "ikfast exception: " __FILE__ ":" IKFAST_STRINGIZE(__LINE__) ": " IKFAST_STRINGIZE(_PRETTY_FUNCTION__) ": Assertion '"  #b "' failed" ); rtapi_exit(-1); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_ (const int* m, const int* n, double complex * a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);


inline double IKabs(double f) { return fabs(f); }

inline double IKsqr(double f) { return f*f; }

inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline double IKsin(double f) { return sin(f); }
inline double IKcos(double f) { return cos(f); }
inline double IKtan(double f) { return tan(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}


inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

// Forward declaration even if they aren't used
static inline void polyroots1(IkReal rawcoeffs[1+1], IkReal rawroots[1], int *numroots );
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int *numroots );
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int *numroots );
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int *numroots );
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int *numroots );
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int *numroots );
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int *numroots );
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int *numroots );


static const struct JointInfo
{
    double limitMin;
    double limitMax;
} JointInfo[] =
{
{ .limitMin=-180.0, .limitMax=180.0 },
{ .limitMin=-130.0, .limitMax=136.0 },
{ .limitMin=-126.0, .limitMax=156.0 },
{ .limitMin=-126.0, .limitMax=156.0 },
{ .limitMin=-130.0, .limitMax=157.0 },
{ .limitMin=-180.0, .limitMax=180.0 },
};
static IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
static unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKcos(j[0]);
x4=IKcos(j[1]);
x5=IKsin(j[2]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=(((IkReal)(1.00000000000000))*(x11));
x13=(((IkReal)(1.00000000000000))*(x2));
x14=(((IkReal)(0.349500000000000))*(x2));
x15=(((IkReal)(1.00000000000000))*(x3));
x16=(((IkReal)(1.00000000000000))*(x10));
x17=(((IkReal)(0.349500000000000))*(x0));
x18=((x4)*(x5));
x19=((x1)*(x3));
x20=((x1)*(x2));
x21=((x0)*(x1));
x22=((x1)*(x5));
x23=((x2)*(x4));
x24=((x20)+(x18));
x25=(((((IkReal)(-1.00000000000000))*(x0)*(x13)*(x4)))+(((x21)*(x5))));
x26=(((((IkReal)(-1.00000000000000))*(x15)*(x22)))+(((x23)*(x3))));
eetrans[0]=((((x17)*(x18)))+((((IkReal)(0.342500000000000))*(x21)))+(((x14)*(x21))));
eetrans[1]=(((((IkReal)(-0.349500000000000))*(x18)*(x3)))+((((IkReal)(-1.00000000000000))*(x14)*(x19)))+((((IkReal)(-0.342500000000000))*(x19))));
eetrans[2]=(((IkReal)(0.261900000000000))+((((IkReal)(-0.349500000000000))*(x22)))+((((IkReal)(0.342500000000000))*(x4)))+(((x14)*(x4))));
eerot[0]=(((((IkReal)(-1.00000000000000))*(x9)*(((((x16)*(((((x0)*(x20)))+(((x0)*(x18)))))))+(((x12)*(((((x25)*(x6)))+((((IkReal)(-1.00000000000000))*(x15)*(x7)))))))))))+(((x8)*(((((x25)*(x7)))+(((x3)*(x6))))))));
eerot[1]=((((x8)*(((((x0)*(x6)))+(((x26)*(x7)))))))+((((IkReal)(-1.00000000000000))*(x9)*((((((IkReal)(1.00000000000000))*(x10)*((((((IkReal)(-1.00000000000000))*(x13)*(x19)))+((((IkReal)(-1.00000000000000))*(x15)*(x18)))))))+((((IkReal)(1.00000000000000))*(x11)*(((((x26)*(x6)))+((((IkReal)(-1.00000000000000))*(x0)*(x7))))))))))));
eerot[2]=((((x24)*(x7)*(x8)))+((((IkReal)(-1.00000000000000))*(x9)*(((((x16)*((((((IkReal)(-1.00000000000000))*(x22)))+(x23)))))+(((x12)*(x24)*(x6))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return IKFAST_NUM_JOINTS; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

int ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionList * solutions) {
j0=NAN; _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=NAN; _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=NAN; _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=NAN; _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=NAN; _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
int dummyiter;
for(dummyiter = 0; dummyiter < 1; ++dummyiter) {
    IkSolutionList_Clear(solutions);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=(((IkReal)(-0.261900000000000))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
cj2array[0]=(((IkReal)(-1.00020467195054))+((((IkReal)(4.17697858254232))*(pp))));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
int ij2;
for(ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
int iij2;
for(iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs((((IkReal)(-1.00000000000000))*(px))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((IkReal)(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x27=IKatan2((((IkReal)(-1.00000000000000))*(px)), (((IkReal)(-1.00000000000000))*(py)));
j0array[0]=(((IkReal)(-1.00000000000000))*(x27));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=(((IkReal)(3.14159265358979))+((((IkReal)(-1.00000000000000))*(x27))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
int ij0;
for(ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
int iij0;
for(iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x28=(((IkReal)(699.000000000000))*(cj2));
IkReal x29=((cj0)*(py));
IkReal x30=((px)*(sj0));
gconst0=IKsign((((((IkReal)(-699.000000000000))*(pz)*(sj2)))+(((x28)*(x29)))+((((IkReal)(685.000000000000))*(x29)))+((((IkReal)(-1.00000000000000))*(x28)*(x30)))+((((IkReal)(-685.000000000000))*(x30)))));
IkReal x31=((cj0)*(py));
IkReal x32=(((IkReal)(1.02043795620438))*(cj2));
IkReal x33=((px)*(sj0));
dummyeval[0]=((((x31)*(x32)))+((((IkReal)(-1.00000000000000))*(x32)*(x33)))+((((IkReal)(-1.00000000000000))*(x33)))+(x31)+((((IkReal)(-1.02043795620438))*(pz)*(sj2))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x34=(((IkReal)(1.02043795620438))*(sj2));
dummyeval[0]=(((((IkReal)(1.02043795620438))*(cj2)*(pz)))+(((cj0)*(py)*(x34)))+((((IkReal)(-1.00000000000000))*(px)*(sj0)*(x34)))+(pz));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
evalcond[0]=((IKabs(pz))+(IKabs((((IkReal)(-3.14159265358979))+(IKfmod((((IkReal)(3.14159265358979))+(j2)), (IkReal)(6.28318530717959)))))));
evalcond[1]=(((IkReal)(0.478864000000000))+((((IkReal)(-1.00000000000000))*(pp))));
evalcond[2]=(((((IkReal)(-1.00000000000000))*(cj0)*(px)))+((((IkReal)(-1.00000000000000))*(py)*(sj0))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=(((((IkReal)(-1.44508670520231))*(cj0)*(py)))+((((IkReal)(1.44508670520231))*(px)*(sj0))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
int ij1;
for(ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x35=IKsin(j1);
IkReal x36=IKcos(j1);
IkReal x37=((px)*(sj0));
IkReal x38=((cj0)*(py));
IkReal x39=(((IkReal)(0.685000000000000))*(x35));
evalcond[0]=(((IkReal)(-0.692000000000000))*(x36));
evalcond[1]=(((IkReal)(-0.692000000000000))+(((x35)*(x37)))+((((IkReal)(-1.00000000000000))*(x35)*(x38))));
evalcond[2]=(((((IkReal)(-1.00000000000000))*(x36)*(x38)))+(((x36)*(x37))));
evalcond[3]=(((IkReal)(0.00484400000000000))+((((IkReal)(-1.00000000000000))*(x38)*(x39)))+((((IkReal)(-1.00000000000000))*(pp)))+(((x37)*(x39))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x40=((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30);
IkReal x41=((r02)*(x40));
IkReal x42=(((IkReal)(1.00000000000000))*(r01)*(x40));
sj4array[0]=(((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x42)))+(((sj1)*(sj2)*(x41)))+((((IkReal)(-1.00000000000000))*(cj1)*(cj2)*(x41)))+((((IkReal)(-1.00000000000000))*(cj2)*(sj1)*(x42))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
int ij4;
for(ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
int iij4;
for(iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=(((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x43=((cj0)*(r02));
IkReal x44=((sj2)*(sj5));
IkReal x45=(((IkReal)(1.00000000000000))*(sj1));
IkReal x46=(((IkReal)(1.00000000000000))*(sj0));
IkReal x47=((r00)*(sj5));
IkReal x48=((r01)*(sj0));
IkReal x49=((cj4)*(cj5));
IkReal x50=((cj1)*(r02));
IkReal x51=(((IkReal)(1.00000000000000))*(cj0));
IkReal x52=((r02)*(sj0));
IkReal x53=((cj2)*(sj5));
IkReal x54=((cj0)*(r01));
IkReal x55=((cj2)*(x49));
IkReal x56=((cj1)*(x54));
if( IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(r00)*(x49)*(x51)))+((((IkReal)(-1.00000000000000))*(sj2)*(x46)*(x49)*(x50)))+(((sj1)*(x44)*(x54)))+(((sj1)*(x43)*(x53)))+(((cj1)*(x43)*(x44)))+((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x51)*(x53)))+((((IkReal)(-1.00000000000000))*(x45)*(x52)*(x55)))+(((cj1)*(x48)*(x55)))+((((IkReal)(-1.00000000000000))*(sj2)*(x45)*(x48)*(x49)))+((((IkReal)(-1.00000000000000))*(x46)*(x47))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(x47)*(x51)))+(((cj1)*(x48)*(x53)))+((((IkReal)(-1.00000000000000))*(x43)*(x45)*(x55)))+((((IkReal)(-1.00000000000000))*(x45)*(x52)*(x53)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x43)*(x49)))+((((IkReal)(-1.00000000000000))*(sj2)*(x45)*(x49)*(x54)))+((((IkReal)(-1.00000000000000))*(x44)*(x45)*(x48)))+((((IkReal)(-1.00000000000000))*(x44)*(x46)*(x50)))+(((r00)*(sj0)*(x49)))+(((x55)*(x56))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*((((((IkReal)(-1.00000000000000))*(r00)*(x49)*(x51)))+((((IkReal)(-1.00000000000000))*(sj2)*(x46)*(x49)*(x50)))+(((sj1)*(x44)*(x54)))+(((sj1)*(x43)*(x53)))+(((cj1)*(x43)*(x44)))+((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x51)*(x53)))+((((IkReal)(-1.00000000000000))*(x45)*(x52)*(x55)))+(((cj1)*(x48)*(x55)))+((((IkReal)(-1.00000000000000))*(sj2)*(x45)*(x48)*(x49)))+((((IkReal)(-1.00000000000000))*(x46)*(x47)))))), ((gconst1)*((((((IkReal)(-1.00000000000000))*(x47)*(x51)))+(((cj1)*(x48)*(x53)))+((((IkReal)(-1.00000000000000))*(x43)*(x45)*(x55)))+((((IkReal)(-1.00000000000000))*(x45)*(x52)*(x53)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x43)*(x49)))+((((IkReal)(-1.00000000000000))*(sj2)*(x45)*(x49)*(x54)))+((((IkReal)(-1.00000000000000))*(x44)*(x45)*(x48)))+((((IkReal)(-1.00000000000000))*(x44)*(x46)*(x50)))+(((r00)*(sj0)*(x49)))+(((x55)*(x56)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
int ij3;
for(ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
int iij3;
for(iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x57=IKsin(j3);
IkReal x58=IKcos(j3);
IkReal x59=((cj2)*(sj1));
IkReal x60=((cj1)*(sj2));
IkReal x61=((cj0)*(r02));
IkReal x62=((cj4)*(cj5));
IkReal x63=(((IkReal)(1.00000000000000))*(sj0));
IkReal x64=(((IkReal)(1.00000000000000))*(cj0));
IkReal x65=((r02)*(x63));
IkReal x66=((r01)*(sj1)*(sj2));
IkReal x67=((cj1)*(cj2)*(r01));
evalcond[0]=((((x59)*(x61)))+(((x60)*(x61)))+((((IkReal)(-1.00000000000000))*(x64)*(x67)))+((((IkReal)(-1.00000000000000))*(x58)*(x62)))+((((IkReal)(-1.00000000000000))*(r00)*(x63)))+(((sj5)*(x57)))+(((cj0)*(x66))));
evalcond[1]=((((x57)*(x62)))+((((IkReal)(-1.00000000000000))*(x60)*(x65)))+((((IkReal)(-1.00000000000000))*(x63)*(x66)))+(((sj5)*(x58)))+((((IkReal)(-1.00000000000000))*(r00)*(x64)))+((((IkReal)(-1.00000000000000))*(x59)*(x65)))+(((sj0)*(x67))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[6];
IkSingleDOFSolution_Init( vinfos, 6 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 6, vfree, 0);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x68=(((IkReal)(1.00000000000000))*(cj2));
sj4array[0]=((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*((((((IkReal)(-1.00000000000000))*(r01)*(sj1)*(x68)))+((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(sj2)))+(((r02)*(sj1)*(sj2)))+((((IkReal)(-1.00000000000000))*(cj1)*(r02)*(x68))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
int ij4;
for(ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
int iij4;
for(iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=(((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x69=((cj0)*(r02));
IkReal x70=((sj2)*(sj5));
IkReal x71=(((IkReal)(1.00000000000000))*(sj1));
IkReal x72=(((IkReal)(1.00000000000000))*(sj0));
IkReal x73=((r00)*(sj5));
IkReal x74=((r01)*(sj0));
IkReal x75=((cj4)*(cj5));
IkReal x76=((cj1)*(r02));
IkReal x77=(((IkReal)(1.00000000000000))*(cj0));
IkReal x78=((r02)*(sj0));
IkReal x79=((cj2)*(sj5));
IkReal x80=((cj0)*(r01));
IkReal x81=((cj2)*(x75));
IkReal x82=((cj1)*(x80));
if( IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x77)*(x79)))+((((IkReal)(-1.00000000000000))*(sj2)*(x71)*(x74)*(x75)))+(((cj1)*(x74)*(x81)))+((((IkReal)(-1.00000000000000))*(sj2)*(x72)*(x75)*(x76)))+((((IkReal)(-1.00000000000000))*(x72)*(x73)))+(((sj1)*(x69)*(x79)))+((((IkReal)(-1.00000000000000))*(x71)*(x78)*(x81)))+((((IkReal)(-1.00000000000000))*(r00)*(x75)*(x77)))+(((sj1)*(x70)*(x80)))+(((cj1)*(x69)*(x70))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((r00)*(sj0)*(x75)))+((((IkReal)(-1.00000000000000))*(x70)*(x71)*(x74)))+((((IkReal)(-1.00000000000000))*(x70)*(x72)*(x76)))+(((x81)*(x82)))+((((IkReal)(-1.00000000000000))*(x69)*(x71)*(x81)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x69)*(x75)))+((((IkReal)(-1.00000000000000))*(sj2)*(x71)*(x75)*(x80)))+((((IkReal)(-1.00000000000000))*(x71)*(x78)*(x79)))+((((IkReal)(-1.00000000000000))*(x73)*(x77)))+(((cj1)*(x74)*(x79))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x77)*(x79)))+((((IkReal)(-1.00000000000000))*(sj2)*(x71)*(x74)*(x75)))+(((cj1)*(x74)*(x81)))+((((IkReal)(-1.00000000000000))*(sj2)*(x72)*(x75)*(x76)))+((((IkReal)(-1.00000000000000))*(x72)*(x73)))+(((sj1)*(x69)*(x79)))+((((IkReal)(-1.00000000000000))*(x71)*(x78)*(x81)))+((((IkReal)(-1.00000000000000))*(r00)*(x75)*(x77)))+(((sj1)*(x70)*(x80)))+(((cj1)*(x69)*(x70)))))), ((gconst1)*(((((r00)*(sj0)*(x75)))+((((IkReal)(-1.00000000000000))*(x70)*(x71)*(x74)))+((((IkReal)(-1.00000000000000))*(x70)*(x72)*(x76)))+(((x81)*(x82)))+((((IkReal)(-1.00000000000000))*(x69)*(x71)*(x81)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x69)*(x75)))+((((IkReal)(-1.00000000000000))*(sj2)*(x71)*(x75)*(x80)))+((((IkReal)(-1.00000000000000))*(x71)*(x78)*(x79)))+((((IkReal)(-1.00000000000000))*(x73)*(x77)))+(((cj1)*(x74)*(x79)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
int ij3;
for(ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
int iij3;
for(iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x83=IKsin(j3);
IkReal x84=IKcos(j3);
IkReal x85=((cj2)*(sj1));
IkReal x86=((cj1)*(sj2));
IkReal x87=((cj0)*(r02));
IkReal x88=((cj4)*(cj5));
IkReal x89=(((IkReal)(1.00000000000000))*(sj0));
IkReal x90=(((IkReal)(1.00000000000000))*(cj0));
IkReal x91=((r02)*(x89));
IkReal x92=((r01)*(sj1)*(sj2));
IkReal x93=((cj1)*(cj2)*(r01));
evalcond[0]=((((x86)*(x87)))+(((sj5)*(x83)))+((((IkReal)(-1.00000000000000))*(x84)*(x88)))+(((x85)*(x87)))+((((IkReal)(-1.00000000000000))*(r00)*(x89)))+((((IkReal)(-1.00000000000000))*(x90)*(x93)))+(((cj0)*(x92))));
evalcond[1]=((((x83)*(x88)))+(((sj5)*(x84)))+(((sj0)*(x93)))+((((IkReal)(-1.00000000000000))*(x89)*(x92)))+((((IkReal)(-1.00000000000000))*(x86)*(x91)))+((((IkReal)(-1.00000000000000))*(r00)*(x90)))+((((IkReal)(-1.00000000000000))*(x85)*(x91))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[6];
IkSingleDOFSolution_Init( vinfos, 6 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 6, vfree, 0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((IKabs((((IkReal)(-3.14159265358979))+(IKfmod(j2, (IkReal)(6.28318530717959))))))+(IKabs(pz)));
evalcond[1]=(((IkReal)(4.90000000000000e-5))+((((IkReal)(-1.00000000000000))*(pp))));
evalcond[2]=(((((IkReal)(-1.00000000000000))*(cj0)*(px)))+((((IkReal)(-1.00000000000000))*(py)*(sj0))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=(((((IkReal)(142.857142857143))*(cj0)*(py)))+((((IkReal)(-142.857142857143))*(px)*(sj0))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
int ij1;
for(ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x94=IKsin(j1);
IkReal x95=IKcos(j1);
IkReal x96=((px)*(sj0));
IkReal x97=((cj0)*(py));
IkReal x98=(((IkReal)(0.685000000000000))*(x94));
evalcond[0]=(((IkReal)(0.00700000000000000))*(x95));
evalcond[1]=(((IkReal)(0.00700000000000000))+((((IkReal)(-1.00000000000000))*(x94)*(x97)))+(((x94)*(x96))));
evalcond[2]=(((((IkReal)(-1.00000000000000))*(x95)*(x97)))+(((x95)*(x96))));
evalcond[3]=(((IkReal)(0.00484400000000000))+((((IkReal)(-1.00000000000000))*(x97)*(x98)))+((((IkReal)(-1.00000000000000))*(pp)))+(((x96)*(x98))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x99=((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30);
IkReal x100=((r02)*(x99));
IkReal x101=(((IkReal)(1.00000000000000))*(r01)*(x99));
sj4array[0]=(((((IkReal)(-1.00000000000000))*(cj1)*(cj2)*(x100)))+((((IkReal)(-1.00000000000000))*(cj2)*(sj1)*(x101)))+(((sj1)*(sj2)*(x100)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x101))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
int ij4;
for(ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
int iij4;
for(iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=(((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x102=((cj0)*(r02));
IkReal x103=((sj2)*(sj5));
IkReal x104=(((IkReal)(1.00000000000000))*(sj1));
IkReal x105=(((IkReal)(1.00000000000000))*(sj0));
IkReal x106=((r00)*(sj5));
IkReal x107=((r01)*(sj0));
IkReal x108=((cj4)*(cj5));
IkReal x109=((cj1)*(r02));
IkReal x110=(((IkReal)(1.00000000000000))*(cj0));
IkReal x111=((r02)*(sj0));
IkReal x112=((cj2)*(sj5));
IkReal x113=((cj0)*(r01));
IkReal x114=((cj2)*(x108));
IkReal x115=((cj1)*(x113));
if( IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x110)*(x112)))+((((IkReal)(-1.00000000000000))*(x104)*(x111)*(x114)))+((((IkReal)(-1.00000000000000))*(x105)*(x106)))+(((sj1)*(x102)*(x112)))+(((cj1)*(x107)*(x114)))+((((IkReal)(-1.00000000000000))*(r00)*(x108)*(x110)))+(((sj1)*(x103)*(x113)))+((((IkReal)(-1.00000000000000))*(sj2)*(x104)*(x107)*(x108)))+((((IkReal)(-1.00000000000000))*(sj2)*(x105)*(x108)*(x109)))+(((cj1)*(x102)*(x103))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(x102)*(x104)*(x114)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x102)*(x108)))+(((r00)*(sj0)*(x108)))+((((IkReal)(-1.00000000000000))*(x103)*(x104)*(x107)))+((((IkReal)(-1.00000000000000))*(x104)*(x111)*(x112)))+((((IkReal)(-1.00000000000000))*(sj2)*(x104)*(x108)*(x113)))+((((IkReal)(-1.00000000000000))*(x106)*(x110)))+((((IkReal)(-1.00000000000000))*(x103)*(x105)*(x109)))+(((x114)*(x115)))+(((cj1)*(x107)*(x112))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x110)*(x112)))+((((IkReal)(-1.00000000000000))*(x104)*(x111)*(x114)))+((((IkReal)(-1.00000000000000))*(x105)*(x106)))+(((sj1)*(x102)*(x112)))+(((cj1)*(x107)*(x114)))+((((IkReal)(-1.00000000000000))*(r00)*(x108)*(x110)))+(((sj1)*(x103)*(x113)))+((((IkReal)(-1.00000000000000))*(sj2)*(x104)*(x107)*(x108)))+((((IkReal)(-1.00000000000000))*(sj2)*(x105)*(x108)*(x109)))+(((cj1)*(x102)*(x103)))))), ((gconst1)*((((((IkReal)(-1.00000000000000))*(x102)*(x104)*(x114)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x102)*(x108)))+(((r00)*(sj0)*(x108)))+((((IkReal)(-1.00000000000000))*(x103)*(x104)*(x107)))+((((IkReal)(-1.00000000000000))*(x104)*(x111)*(x112)))+((((IkReal)(-1.00000000000000))*(sj2)*(x104)*(x108)*(x113)))+((((IkReal)(-1.00000000000000))*(x106)*(x110)))+((((IkReal)(-1.00000000000000))*(x103)*(x105)*(x109)))+(((x114)*(x115)))+(((cj1)*(x107)*(x112)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
int ij3;
for(ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
int iij3;
for(iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x116=IKsin(j3);
IkReal x117=IKcos(j3);
IkReal x118=((cj2)*(sj1));
IkReal x119=((cj1)*(sj2));
IkReal x120=((cj0)*(r02));
IkReal x121=((cj4)*(cj5));
IkReal x122=(((IkReal)(1.00000000000000))*(sj0));
IkReal x123=(((IkReal)(1.00000000000000))*(cj0));
IkReal x124=((r02)*(x122));
IkReal x125=((r01)*(sj1)*(sj2));
IkReal x126=((cj1)*(cj2)*(r01));
evalcond[0]=(((((IkReal)(-1.00000000000000))*(x117)*(x121)))+((((IkReal)(-1.00000000000000))*(x123)*(x126)))+(((x119)*(x120)))+((((IkReal)(-1.00000000000000))*(r00)*(x122)))+(((cj0)*(x125)))+(((x118)*(x120)))+(((sj5)*(x116))));
evalcond[1]=(((((IkReal)(-1.00000000000000))*(x122)*(x125)))+(((x116)*(x121)))+(((sj0)*(x126)))+((((IkReal)(-1.00000000000000))*(x119)*(x124)))+(((sj5)*(x117)))+((((IkReal)(-1.00000000000000))*(x118)*(x124)))+((((IkReal)(-1.00000000000000))*(r00)*(x123))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[6];
IkSingleDOFSolution_Init( vinfos, 6 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 6, vfree, 0);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x127=(((IkReal)(1.00000000000000))*(cj2));
sj4array[0]=((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*((((((IkReal)(-1.00000000000000))*(r01)*(sj1)*(x127)))+((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(sj2)))+(((r02)*(sj1)*(sj2)))+((((IkReal)(-1.00000000000000))*(cj1)*(r02)*(x127))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
int ij4;
for(ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
int iij4;
for(iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=(((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x128=((cj0)*(r02));
IkReal x129=((sj2)*(sj5));
IkReal x130=(((IkReal)(1.00000000000000))*(sj1));
IkReal x131=(((IkReal)(1.00000000000000))*(sj0));
IkReal x132=((r00)*(sj5));
IkReal x133=((r01)*(sj0));
IkReal x134=((cj4)*(cj5));
IkReal x135=((cj1)*(r02));
IkReal x136=(((IkReal)(1.00000000000000))*(cj0));
IkReal x137=((r02)*(sj0));
IkReal x138=((cj2)*(sj5));
IkReal x139=((cj0)*(r01));
IkReal x140=((cj2)*(x134));
IkReal x141=((cj1)*(x139));
if( IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x136)*(x138)))+(((sj1)*(x128)*(x138)))+(((cj1)*(x128)*(x129)))+((((IkReal)(-1.00000000000000))*(r00)*(x134)*(x136)))+((((IkReal)(-1.00000000000000))*(x130)*(x137)*(x140)))+(((cj1)*(x133)*(x140)))+((((IkReal)(-1.00000000000000))*(sj2)*(x130)*(x133)*(x134)))+((((IkReal)(-1.00000000000000))*(x131)*(x132)))+(((sj1)*(x129)*(x139)))+((((IkReal)(-1.00000000000000))*(sj2)*(x131)*(x134)*(x135))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(sj2)*(x130)*(x134)*(x139)))+((((IkReal)(-1.00000000000000))*(x129)*(x131)*(x135)))+((((IkReal)(-1.00000000000000))*(x129)*(x130)*(x133)))+(((r00)*(sj0)*(x134)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x128)*(x134)))+((((IkReal)(-1.00000000000000))*(x132)*(x136)))+(((x140)*(x141)))+((((IkReal)(-1.00000000000000))*(x130)*(x137)*(x138)))+(((cj1)*(x133)*(x138)))+((((IkReal)(-1.00000000000000))*(x128)*(x130)*(x140))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x136)*(x138)))+(((sj1)*(x128)*(x138)))+(((cj1)*(x128)*(x129)))+((((IkReal)(-1.00000000000000))*(r00)*(x134)*(x136)))+((((IkReal)(-1.00000000000000))*(x130)*(x137)*(x140)))+(((cj1)*(x133)*(x140)))+((((IkReal)(-1.00000000000000))*(sj2)*(x130)*(x133)*(x134)))+((((IkReal)(-1.00000000000000))*(x131)*(x132)))+(((sj1)*(x129)*(x139)))+((((IkReal)(-1.00000000000000))*(sj2)*(x131)*(x134)*(x135)))))), ((gconst1)*((((((IkReal)(-1.00000000000000))*(sj2)*(x130)*(x134)*(x139)))+((((IkReal)(-1.00000000000000))*(x129)*(x131)*(x135)))+((((IkReal)(-1.00000000000000))*(x129)*(x130)*(x133)))+(((r00)*(sj0)*(x134)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x128)*(x134)))+((((IkReal)(-1.00000000000000))*(x132)*(x136)))+(((x140)*(x141)))+((((IkReal)(-1.00000000000000))*(x130)*(x137)*(x138)))+(((cj1)*(x133)*(x138)))+((((IkReal)(-1.00000000000000))*(x128)*(x130)*(x140)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
int ij3;
for(ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
int iij3;
for(iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x142=IKsin(j3);
IkReal x143=IKcos(j3);
IkReal x144=((cj2)*(sj1));
IkReal x145=((cj1)*(sj2));
IkReal x146=((cj0)*(r02));
IkReal x147=((cj4)*(cj5));
IkReal x148=(((IkReal)(1.00000000000000))*(sj0));
IkReal x149=(((IkReal)(1.00000000000000))*(cj0));
IkReal x150=((r02)*(x148));
IkReal x151=((r01)*(sj1)*(sj2));
IkReal x152=((cj1)*(cj2)*(r01));
evalcond[0]=(((((IkReal)(-1.00000000000000))*(x143)*(x147)))+(((x144)*(x146)))+(((sj5)*(x142)))+(((x145)*(x146)))+(((cj0)*(x151)))+((((IkReal)(-1.00000000000000))*(x149)*(x152)))+((((IkReal)(-1.00000000000000))*(r00)*(x148))));
evalcond[1]=((((sj5)*(x143)))+((((IkReal)(-1.00000000000000))*(x145)*(x150)))+((((IkReal)(-1.00000000000000))*(r00)*(x149)))+((((IkReal)(-1.00000000000000))*(x144)*(x150)))+(((x142)*(x147)))+((((IkReal)(-1.00000000000000))*(x148)*(x151)))+(((sj0)*(x152))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[6];
IkSingleDOFSolution_Init( vinfos, 6 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 6, vfree, 0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x153=((cj2)*(pz));
IkReal x154=(((IkReal)(2000.00000000000))*(pz));
IkReal x155=((px)*(sj0));
IkReal x156=((cj0)*(py)*(sj2));
if( IKabs(((((IKabs((((((IkReal)(685.000000000000))*(pz)))+((((IkReal)(699.000000000000))*(x156)))+((((IkReal)(-699.000000000000))*(sj2)*(x155)))+((((IkReal)(699.000000000000))*(x153))))) != 0)?((IkReal)1/((((((IkReal)(685.000000000000))*(pz)))+((((IkReal)(699.000000000000))*(x156)))+((((IkReal)(-699.000000000000))*(sj2)*(x155)))+((((IkReal)(699.000000000000))*(x153)))))):(IkReal)1.0e30))*((((((IkReal)(-1.00000000000000))*(cj0)*(py)*(x154)))+((((IkReal)(-244.300500000000))*(cj2)*(sj2)))+((((IkReal)(-239.407500000000))*(sj2)))+(((x154)*(x155))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs((((((IkReal)(-1398000.00000000))*(x156)))+((((IkReal)(-1398000.00000000))*(x153)))+((((IkReal)(-1370000.00000000))*(pz)))+((((IkReal)(1398000.00000000))*(sj2)*(x155))))) != 0)?((IkReal)1/((((((IkReal)(-1398000.00000000))*(x156)))+((((IkReal)(-1398000.00000000))*(x153)))+((((IkReal)(-1370000.00000000))*(pz)))+((((IkReal)(1398000.00000000))*(sj2)*(x155)))))):(IkReal)1.0e30))*((((((IkReal)(488601.000000000))*((sj2)*(sj2))))+((((IkReal)(-4000000.00000000))*((pz)*(pz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs((((((IkReal)(685.000000000000))*(pz)))+((((IkReal)(699.000000000000))*(x156)))+((((IkReal)(-699.000000000000))*(sj2)*(x155)))+((((IkReal)(699.000000000000))*(x153))))) != 0)?((IkReal)1/((((((IkReal)(685.000000000000))*(pz)))+((((IkReal)(699.000000000000))*(x156)))+((((IkReal)(-699.000000000000))*(sj2)*(x155)))+((((IkReal)(699.000000000000))*(x153)))))):(IkReal)1.0e30))*((((((IkReal)(-1.00000000000000))*(cj0)*(py)*(x154)))+((((IkReal)(-244.300500000000))*(cj2)*(sj2)))+((((IkReal)(-239.407500000000))*(sj2)))+(((x154)*(x155)))))))+IKsqr(((((IKabs((((((IkReal)(-1398000.00000000))*(x156)))+((((IkReal)(-1398000.00000000))*(x153)))+((((IkReal)(-1370000.00000000))*(pz)))+((((IkReal)(1398000.00000000))*(sj2)*(x155))))) != 0)?((IkReal)1/((((((IkReal)(-1398000.00000000))*(x156)))+((((IkReal)(-1398000.00000000))*(x153)))+((((IkReal)(-1370000.00000000))*(pz)))+((((IkReal)(1398000.00000000))*(sj2)*(x155)))))):(IkReal)1.0e30))*((((((IkReal)(488601.000000000))*((sj2)*(sj2))))+((((IkReal)(-4000000.00000000))*((pz)*(pz))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((IKabs((((((IkReal)(685.000000000000))*(pz)))+((((IkReal)(699.000000000000))*(x156)))+((((IkReal)(-699.000000000000))*(sj2)*(x155)))+((((IkReal)(699.000000000000))*(x153))))) != 0)?((IkReal)1/((((((IkReal)(685.000000000000))*(pz)))+((((IkReal)(699.000000000000))*(x156)))+((((IkReal)(-699.000000000000))*(sj2)*(x155)))+((((IkReal)(699.000000000000))*(x153)))))):(IkReal)1.0e30))*((((((IkReal)(-1.00000000000000))*(cj0)*(py)*(x154)))+((((IkReal)(-244.300500000000))*(cj2)*(sj2)))+((((IkReal)(-239.407500000000))*(sj2)))+(((x154)*(x155)))))), ((((IKabs((((((IkReal)(-1398000.00000000))*(x156)))+((((IkReal)(-1398000.00000000))*(x153)))+((((IkReal)(-1370000.00000000))*(pz)))+((((IkReal)(1398000.00000000))*(sj2)*(x155))))) != 0)?((IkReal)1/((((((IkReal)(-1398000.00000000))*(x156)))+((((IkReal)(-1398000.00000000))*(x153)))+((((IkReal)(-1370000.00000000))*(pz)))+((((IkReal)(1398000.00000000))*(sj2)*(x155)))))):(IkReal)1.0e30))*((((((IkReal)(488601.000000000))*((sj2)*(sj2))))+((((IkReal)(-4000000.00000000))*((pz)*(pz))))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
int ij1;
for(ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x157=IKcos(j1);
IkReal x158=IKsin(j1);
IkReal x159=((px)*(sj0));
IkReal x160=(((IkReal)(0.349500000000000))*(cj2));
IkReal x161=(((IkReal)(0.349500000000000))*(sj2));
IkReal x162=((cj0)*(py));
IkReal x163=(((IkReal)(0.685000000000000))*(x158));
IkReal x164=(((IkReal)(1.00000000000000))*(x158));
IkReal x165=((pz)*(x157));
evalcond[0]=(((((IkReal)(-0.342500000000000))*(x157)))+(((x158)*(x161)))+(pz)+((((IkReal)(-1.00000000000000))*(x157)*(x160))));
evalcond[1]=(((IkReal)(-0.342500000000000))+(x165)+((((IkReal)(-1.00000000000000))*(x160)))+((((IkReal)(-1.00000000000000))*(x162)*(x164)))+(((x158)*(x159))));
evalcond[2]=(((((IkReal)(-1.00000000000000))*(x157)*(x162)))+(((x157)*(x159)))+((((IkReal)(-1.00000000000000))*(pz)*(x164)))+((((IkReal)(-1.00000000000000))*(x161))));
evalcond[3]=(((IkReal)(0.00484400000000000))+((((IkReal)(0.685000000000000))*(x165)))+(((x159)*(x163)))+((((IkReal)(-1.00000000000000))*(pp)))+((((IkReal)(-1.00000000000000))*(x162)*(x163))));
evalcond[4]=((x159)+((((IkReal)(-1.00000000000000))*(x162)))+((((IkReal)(-1.00000000000000))*(x157)*(x161)))+((((IkReal)(-1.00000000000000))*(x158)*(x160)))+((((IkReal)(-0.342500000000000))*(x158))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x166=((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30);
IkReal x167=((r02)*(x166));
IkReal x168=(((IkReal)(1.00000000000000))*(r01)*(x166));
sj4array[0]=(((((IkReal)(-1.00000000000000))*(cj2)*(sj1)*(x168)))+((((IkReal)(-1.00000000000000))*(cj1)*(cj2)*(x167)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x168)))+(((sj1)*(sj2)*(x167))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
int ij4;
for(ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
int iij4;
for(iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=(((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x169=((cj0)*(r02));
IkReal x170=((sj2)*(sj5));
IkReal x171=(((IkReal)(1.00000000000000))*(sj1));
IkReal x172=(((IkReal)(1.00000000000000))*(sj0));
IkReal x173=((r00)*(sj5));
IkReal x174=((r01)*(sj0));
IkReal x175=((cj4)*(cj5));
IkReal x176=((cj1)*(r02));
IkReal x177=(((IkReal)(1.00000000000000))*(cj0));
IkReal x178=((r02)*(sj0));
IkReal x179=((cj2)*(sj5));
IkReal x180=((cj0)*(r01));
IkReal x181=((cj2)*(x175));
IkReal x182=((cj1)*(x180));
if( IKabs(((gconst1)*(((((sj1)*(x169)*(x179)))+((((IkReal)(-1.00000000000000))*(sj2)*(x172)*(x175)*(x176)))+(((sj1)*(x170)*(x180)))+((((IkReal)(-1.00000000000000))*(sj2)*(x171)*(x174)*(x175)))+((((IkReal)(-1.00000000000000))*(x171)*(x178)*(x181)))+(((cj1)*(x174)*(x181)))+(((cj1)*(x169)*(x170)))+((((IkReal)(-1.00000000000000))*(r00)*(x175)*(x177)))+((((IkReal)(-1.00000000000000))*(x172)*(x173)))+((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x177)*(x179))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(x170)*(x172)*(x176)))+((((IkReal)(-1.00000000000000))*(sj2)*(x171)*(x175)*(x180)))+((((IkReal)(-1.00000000000000))*(x171)*(x178)*(x179)))+((((IkReal)(-1.00000000000000))*(x169)*(x171)*(x181)))+(((cj1)*(x174)*(x179)))+((((IkReal)(-1.00000000000000))*(x170)*(x171)*(x174)))+(((x181)*(x182)))+((((IkReal)(-1.00000000000000))*(x173)*(x177)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x169)*(x175)))+(((r00)*(sj0)*(x175))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(((((sj1)*(x169)*(x179)))+((((IkReal)(-1.00000000000000))*(sj2)*(x172)*(x175)*(x176)))+(((sj1)*(x170)*(x180)))+((((IkReal)(-1.00000000000000))*(sj2)*(x171)*(x174)*(x175)))+((((IkReal)(-1.00000000000000))*(x171)*(x178)*(x181)))+(((cj1)*(x174)*(x181)))+(((cj1)*(x169)*(x170)))+((((IkReal)(-1.00000000000000))*(r00)*(x175)*(x177)))+((((IkReal)(-1.00000000000000))*(x172)*(x173)))+((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x177)*(x179)))))), ((gconst1)*((((((IkReal)(-1.00000000000000))*(x170)*(x172)*(x176)))+((((IkReal)(-1.00000000000000))*(sj2)*(x171)*(x175)*(x180)))+((((IkReal)(-1.00000000000000))*(x171)*(x178)*(x179)))+((((IkReal)(-1.00000000000000))*(x169)*(x171)*(x181)))+(((cj1)*(x174)*(x179)))+((((IkReal)(-1.00000000000000))*(x170)*(x171)*(x174)))+(((x181)*(x182)))+((((IkReal)(-1.00000000000000))*(x173)*(x177)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x169)*(x175)))+(((r00)*(sj0)*(x175)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
int ij3;
for(ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
int iij3;
for(iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x183=IKsin(j3);
IkReal x184=IKcos(j3);
IkReal x185=((cj2)*(sj1));
IkReal x186=((cj1)*(sj2));
IkReal x187=((cj0)*(r02));
IkReal x188=((cj4)*(cj5));
IkReal x189=(((IkReal)(1.00000000000000))*(sj0));
IkReal x190=(((IkReal)(1.00000000000000))*(cj0));
IkReal x191=((r02)*(x189));
IkReal x192=((r01)*(sj1)*(sj2));
IkReal x193=((cj1)*(cj2)*(r01));
evalcond[0]=(((((IkReal)(-1.00000000000000))*(x190)*(x193)))+(((sj5)*(x183)))+((((IkReal)(-1.00000000000000))*(x184)*(x188)))+(((x185)*(x187)))+(((x186)*(x187)))+((((IkReal)(-1.00000000000000))*(r00)*(x189)))+(((cj0)*(x192))));
evalcond[1]=(((((IkReal)(-1.00000000000000))*(x185)*(x191)))+(((sj5)*(x184)))+(((sj0)*(x193)))+((((IkReal)(-1.00000000000000))*(r00)*(x190)))+((((IkReal)(-1.00000000000000))*(x186)*(x191)))+((((IkReal)(-1.00000000000000))*(x189)*(x192)))+(((x183)*(x188))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[6];
IkSingleDOFSolution_Init( vinfos, 6 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 6, vfree, 0);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x194=(((IkReal)(1.00000000000000))*(cj2));
sj4array[0]=((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(sj2)))+(((r02)*(sj1)*(sj2)))+((((IkReal)(-1.00000000000000))*(cj1)*(r02)*(x194)))+((((IkReal)(-1.00000000000000))*(r01)*(sj1)*(x194))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
int ij4;
for(ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
int iij4;
for(iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=(((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x195=((cj0)*(r02));
IkReal x196=((sj2)*(sj5));
IkReal x197=(((IkReal)(1.00000000000000))*(sj1));
IkReal x198=(((IkReal)(1.00000000000000))*(sj0));
IkReal x199=((r00)*(sj5));
IkReal x200=((r01)*(sj0));
IkReal x201=((cj4)*(cj5));
IkReal x202=((cj1)*(r02));
IkReal x203=(((IkReal)(1.00000000000000))*(cj0));
IkReal x204=((r02)*(sj0));
IkReal x205=((cj2)*(sj5));
IkReal x206=((cj0)*(r01));
IkReal x207=((cj2)*(x201));
IkReal x208=((cj1)*(x206));
if( IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(x198)*(x199)))+((((IkReal)(-1.00000000000000))*(sj2)*(x198)*(x201)*(x202)))+((((IkReal)(-1.00000000000000))*(r00)*(x201)*(x203)))+((((IkReal)(-1.00000000000000))*(sj2)*(x197)*(x200)*(x201)))+((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x203)*(x205)))+(((sj1)*(x195)*(x205)))+(((sj1)*(x196)*(x206)))+(((cj1)*(x200)*(x207)))+(((cj1)*(x195)*(x196)))+((((IkReal)(-1.00000000000000))*(x197)*(x204)*(x207))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(x196)*(x197)*(x200)))+((((IkReal)(-1.00000000000000))*(sj2)*(x197)*(x201)*(x206)))+(((cj1)*(x200)*(x205)))+((((IkReal)(-1.00000000000000))*(x195)*(x197)*(x207)))+(((x207)*(x208)))+((((IkReal)(-1.00000000000000))*(x199)*(x203)))+(((r00)*(sj0)*(x201)))+((((IkReal)(-1.00000000000000))*(x197)*(x204)*(x205)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x195)*(x201)))+((((IkReal)(-1.00000000000000))*(x196)*(x198)*(x202))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*((((((IkReal)(-1.00000000000000))*(x198)*(x199)))+((((IkReal)(-1.00000000000000))*(sj2)*(x198)*(x201)*(x202)))+((((IkReal)(-1.00000000000000))*(r00)*(x201)*(x203)))+((((IkReal)(-1.00000000000000))*(sj2)*(x197)*(x200)*(x201)))+((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x203)*(x205)))+(((sj1)*(x195)*(x205)))+(((sj1)*(x196)*(x206)))+(((cj1)*(x200)*(x207)))+(((cj1)*(x195)*(x196)))+((((IkReal)(-1.00000000000000))*(x197)*(x204)*(x207)))))), ((gconst1)*((((((IkReal)(-1.00000000000000))*(x196)*(x197)*(x200)))+((((IkReal)(-1.00000000000000))*(sj2)*(x197)*(x201)*(x206)))+(((cj1)*(x200)*(x205)))+((((IkReal)(-1.00000000000000))*(x195)*(x197)*(x207)))+(((x207)*(x208)))+((((IkReal)(-1.00000000000000))*(x199)*(x203)))+(((r00)*(sj0)*(x201)))+((((IkReal)(-1.00000000000000))*(x197)*(x204)*(x205)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x195)*(x201)))+((((IkReal)(-1.00000000000000))*(x196)*(x198)*(x202)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
int ij3;
for(ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
int iij3;
for(iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x209=IKsin(j3);
IkReal x210=IKcos(j3);
IkReal x211=((cj2)*(sj1));
IkReal x212=((cj1)*(sj2));
IkReal x213=((cj0)*(r02));
IkReal x214=((cj4)*(cj5));
IkReal x215=(((IkReal)(1.00000000000000))*(sj0));
IkReal x216=(((IkReal)(1.00000000000000))*(cj0));
IkReal x217=((r02)*(x215));
IkReal x218=((r01)*(sj1)*(sj2));
IkReal x219=((cj1)*(cj2)*(r01));
evalcond[0]=(((((IkReal)(-1.00000000000000))*(x210)*(x214)))+((((IkReal)(-1.00000000000000))*(r00)*(x215)))+(((sj5)*(x209)))+(((x212)*(x213)))+(((x211)*(x213)))+((((IkReal)(-1.00000000000000))*(x216)*(x219)))+(((cj0)*(x218))));
evalcond[1]=(((((IkReal)(-1.00000000000000))*(x211)*(x217)))+((((IkReal)(-1.00000000000000))*(r00)*(x216)))+((((IkReal)(-1.00000000000000))*(x215)*(x218)))+(((sj5)*(x210)))+(((x209)*(x214)))+((((IkReal)(-1.00000000000000))*(x212)*(x217)))+(((sj0)*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[6];
IkSingleDOFSolution_Init( vinfos, 6 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 6, vfree, 0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x220=(((IkReal)(2000.00000000000))*(pz));
if( IKabs(((gconst0)*((((IkReal)(-234.612500000000))+((((IkReal)(-478.815000000000))*(cj2)))+(((pz)*(x220)))+((((IkReal)(-244.300500000000))*((cj2)*(cj2)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj0)*(py)*(x220)))+((((IkReal)(-244.300500000000))*(cj2)*(sj2)))+((((IkReal)(-1.00000000000000))*(px)*(sj0)*(x220)))+((((IkReal)(-239.407500000000))*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst0)*((((IkReal)(-234.612500000000))+((((IkReal)(-478.815000000000))*(cj2)))+(((pz)*(x220)))+((((IkReal)(-244.300500000000))*((cj2)*(cj2))))))), ((gconst0)*(((((cj0)*(py)*(x220)))+((((IkReal)(-244.300500000000))*(cj2)*(sj2)))+((((IkReal)(-1.00000000000000))*(px)*(sj0)*(x220)))+((((IkReal)(-239.407500000000))*(sj2)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
int ij1;
for(ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x221=IKcos(j1);
IkReal x222=IKsin(j1);
IkReal x223=((px)*(sj0));
IkReal x224=(((IkReal)(0.349500000000000))*(cj2));
IkReal x225=(((IkReal)(0.349500000000000))*(sj2));
IkReal x226=((cj0)*(py));
IkReal x227=(((IkReal)(0.685000000000000))*(x222));
IkReal x228=(((IkReal)(1.00000000000000))*(x222));
IkReal x229=((pz)*(x221));
evalcond[0]=(((((IkReal)(-1.00000000000000))*(x221)*(x224)))+(pz)+(((x222)*(x225)))+((((IkReal)(-0.342500000000000))*(x221))));
evalcond[1]=(((IkReal)(-0.342500000000000))+((((IkReal)(-1.00000000000000))*(x224)))+(x229)+((((IkReal)(-1.00000000000000))*(x226)*(x228)))+(((x222)*(x223))));
evalcond[2]=(((((IkReal)(-1.00000000000000))*(x221)*(x226)))+((((IkReal)(-1.00000000000000))*(x225)))+((((IkReal)(-1.00000000000000))*(pz)*(x228)))+(((x221)*(x223))));
evalcond[3]=(((IkReal)(0.00484400000000000))+((((IkReal)(0.685000000000000))*(x229)))+(((x223)*(x227)))+((((IkReal)(-1.00000000000000))*(pp)))+((((IkReal)(-1.00000000000000))*(x226)*(x227))));
evalcond[4]=(((((IkReal)(-1.00000000000000))*(x221)*(x225)))+(x223)+((((IkReal)(-1.00000000000000))*(x226)))+((((IkReal)(-0.342500000000000))*(x222)))+((((IkReal)(-1.00000000000000))*(x222)*(x224))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x230=((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30);
IkReal x231=((r02)*(x230));
IkReal x232=(((IkReal)(1.00000000000000))*(r01)*(x230));
sj4array[0]=(((((IkReal)(-1.00000000000000))*(cj2)*(sj1)*(x232)))+((((IkReal)(-1.00000000000000))*(cj1)*(cj2)*(x231)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x232)))+(((sj1)*(sj2)*(x231))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
int ij4;
for(ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
int iij4;
for(iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=(((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x233=((cj0)*(r02));
IkReal x234=((sj2)*(sj5));
IkReal x235=(((IkReal)(1.00000000000000))*(sj1));
IkReal x236=(((IkReal)(1.00000000000000))*(sj0));
IkReal x237=((r00)*(sj5));
IkReal x238=((r01)*(sj0));
IkReal x239=((cj4)*(cj5));
IkReal x240=((cj1)*(r02));
IkReal x241=(((IkReal)(1.00000000000000))*(cj0));
IkReal x242=((r02)*(sj0));
IkReal x243=((cj2)*(sj5));
IkReal x244=((cj0)*(r01));
IkReal x245=((cj2)*(x239));
IkReal x246=((cj1)*(x244));
if( IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x241)*(x243)))+(((sj1)*(x234)*(x244)))+(((cj1)*(x238)*(x245)))+(((sj1)*(x233)*(x243)))+((((IkReal)(-1.00000000000000))*(r00)*(x239)*(x241)))+((((IkReal)(-1.00000000000000))*(sj2)*(x236)*(x239)*(x240)))+((((IkReal)(-1.00000000000000))*(x235)*(x242)*(x245)))+((((IkReal)(-1.00000000000000))*(x236)*(x237)))+(((cj1)*(x233)*(x234)))+((((IkReal)(-1.00000000000000))*(sj2)*(x235)*(x238)*(x239))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x233)*(x239)))+((((IkReal)(-1.00000000000000))*(x235)*(x242)*(x243)))+((((IkReal)(-1.00000000000000))*(x234)*(x236)*(x240)))+((((IkReal)(-1.00000000000000))*(sj2)*(x235)*(x239)*(x244)))+((((IkReal)(-1.00000000000000))*(x233)*(x235)*(x245)))+((((IkReal)(-1.00000000000000))*(x237)*(x241)))+(((x245)*(x246)))+(((cj1)*(x238)*(x243)))+(((r00)*(sj0)*(x239)))+((((IkReal)(-1.00000000000000))*(x234)*(x235)*(x238))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x241)*(x243)))+(((sj1)*(x234)*(x244)))+(((cj1)*(x238)*(x245)))+(((sj1)*(x233)*(x243)))+((((IkReal)(-1.00000000000000))*(r00)*(x239)*(x241)))+((((IkReal)(-1.00000000000000))*(sj2)*(x236)*(x239)*(x240)))+((((IkReal)(-1.00000000000000))*(x235)*(x242)*(x245)))+((((IkReal)(-1.00000000000000))*(x236)*(x237)))+(((cj1)*(x233)*(x234)))+((((IkReal)(-1.00000000000000))*(sj2)*(x235)*(x238)*(x239)))))), ((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x233)*(x239)))+((((IkReal)(-1.00000000000000))*(x235)*(x242)*(x243)))+((((IkReal)(-1.00000000000000))*(x234)*(x236)*(x240)))+((((IkReal)(-1.00000000000000))*(sj2)*(x235)*(x239)*(x244)))+((((IkReal)(-1.00000000000000))*(x233)*(x235)*(x245)))+((((IkReal)(-1.00000000000000))*(x237)*(x241)))+(((x245)*(x246)))+(((cj1)*(x238)*(x243)))+(((r00)*(sj0)*(x239)))+((((IkReal)(-1.00000000000000))*(x234)*(x235)*(x238)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
int ij3;
for(ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
int iij3;
for(iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x247=IKsin(j3);
IkReal x248=IKcos(j3);
IkReal x249=((cj2)*(sj1));
IkReal x250=((cj1)*(sj2));
IkReal x251=((cj0)*(r02));
IkReal x252=((cj4)*(cj5));
IkReal x253=(((IkReal)(1.00000000000000))*(sj0));
IkReal x254=(((IkReal)(1.00000000000000))*(cj0));
IkReal x255=((r02)*(x253));
IkReal x256=((r01)*(sj1)*(sj2));
IkReal x257=((cj1)*(cj2)*(r01));
evalcond[0]=((((x250)*(x251)))+(((x249)*(x251)))+((((IkReal)(-1.00000000000000))*(x248)*(x252)))+(((sj5)*(x247)))+((((IkReal)(-1.00000000000000))*(r00)*(x253)))+((((IkReal)(-1.00000000000000))*(x254)*(x257)))+(((cj0)*(x256))));
evalcond[1]=((((sj0)*(x257)))+(((sj5)*(x248)))+((((IkReal)(-1.00000000000000))*(x253)*(x256)))+((((IkReal)(-1.00000000000000))*(x250)*(x255)))+((((IkReal)(-1.00000000000000))*(r00)*(x254)))+(((x247)*(x252)))+((((IkReal)(-1.00000000000000))*(x249)*(x255))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[6];
IkSingleDOFSolution_Init( vinfos, 6 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 6, vfree, 0);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x258=(((IkReal)(1.00000000000000))*(cj2));
sj4array[0]=((((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(sj2)))+(((r02)*(sj1)*(sj2)))+((((IkReal)(-1.00000000000000))*(r01)*(sj1)*(x258)))+((((IkReal)(-1.00000000000000))*(cj1)*(r02)*(x258))))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
int ij4;
for(ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
int iij4;
for(iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=(((((IkReal)(-1.00000000000000))*((cj4)*(cj4))*((cj5)*(cj5))))+((((IkReal)(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x259=((cj0)*(r02));
IkReal x260=((sj2)*(sj5));
IkReal x261=(((IkReal)(1.00000000000000))*(sj1));
IkReal x262=(((IkReal)(1.00000000000000))*(sj0));
IkReal x263=((r00)*(sj5));
IkReal x264=((r01)*(sj0));
IkReal x265=((cj4)*(cj5));
IkReal x266=((cj1)*(r02));
IkReal x267=(((IkReal)(1.00000000000000))*(cj0));
IkReal x268=((r02)*(sj0));
IkReal x269=((cj2)*(sj5));
IkReal x270=((cj0)*(r01));
IkReal x271=((cj2)*(x265));
IkReal x272=((cj1)*(x270));
if( IKabs(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x267)*(x269)))+((((IkReal)(-1.00000000000000))*(sj2)*(x261)*(x264)*(x265)))+(((cj1)*(x259)*(x260)))+(((cj1)*(x264)*(x271)))+(((sj1)*(x260)*(x270)))+((((IkReal)(-1.00000000000000))*(x261)*(x268)*(x271)))+(((sj1)*(x259)*(x269)))+((((IkReal)(-1.00000000000000))*(sj2)*(x262)*(x265)*(x266)))+((((IkReal)(-1.00000000000000))*(x262)*(x263)))+((((IkReal)(-1.00000000000000))*(r00)*(x265)*(x267))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj1)*(x264)*(x269)))+((((IkReal)(-1.00000000000000))*(x263)*(x267)))+((((IkReal)(-1.00000000000000))*(sj2)*(x261)*(x265)*(x270)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x259)*(x265)))+((((IkReal)(-1.00000000000000))*(x259)*(x261)*(x271)))+(((x271)*(x272)))+((((IkReal)(-1.00000000000000))*(x260)*(x261)*(x264)))+((((IkReal)(-1.00000000000000))*(x260)*(x262)*(x266)))+((((IkReal)(-1.00000000000000))*(x261)*(x268)*(x269)))+(((r00)*(sj0)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*((((((IkReal)(-1.00000000000000))*(cj1)*(r01)*(x267)*(x269)))+((((IkReal)(-1.00000000000000))*(sj2)*(x261)*(x264)*(x265)))+(((cj1)*(x259)*(x260)))+(((cj1)*(x264)*(x271)))+(((sj1)*(x260)*(x270)))+((((IkReal)(-1.00000000000000))*(x261)*(x268)*(x271)))+(((sj1)*(x259)*(x269)))+((((IkReal)(-1.00000000000000))*(sj2)*(x262)*(x265)*(x266)))+((((IkReal)(-1.00000000000000))*(x262)*(x263)))+((((IkReal)(-1.00000000000000))*(r00)*(x265)*(x267)))))), ((gconst1)*(((((cj1)*(x264)*(x269)))+((((IkReal)(-1.00000000000000))*(x263)*(x267)))+((((IkReal)(-1.00000000000000))*(sj2)*(x261)*(x265)*(x270)))+((((IkReal)(-1.00000000000000))*(cj1)*(sj2)*(x259)*(x265)))+((((IkReal)(-1.00000000000000))*(x259)*(x261)*(x271)))+(((x271)*(x272)))+((((IkReal)(-1.00000000000000))*(x260)*(x261)*(x264)))+((((IkReal)(-1.00000000000000))*(x260)*(x262)*(x266)))+((((IkReal)(-1.00000000000000))*(x261)*(x268)*(x269)))+(((r00)*(sj0)*(x265)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
int ij3;
for(ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
int iij3;
for(iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x273=IKsin(j3);
IkReal x274=IKcos(j3);
IkReal x275=((cj2)*(sj1));
IkReal x276=((cj1)*(sj2));
IkReal x277=((cj0)*(r02));
IkReal x278=((cj4)*(cj5));
IkReal x279=(((IkReal)(1.00000000000000))*(sj0));
IkReal x280=(((IkReal)(1.00000000000000))*(cj0));
IkReal x281=((r02)*(x279));
IkReal x282=((r01)*(sj1)*(sj2));
IkReal x283=((cj1)*(cj2)*(r01));
evalcond[0]=((((sj5)*(x273)))+((((IkReal)(-1.00000000000000))*(x274)*(x278)))+((((IkReal)(-1.00000000000000))*(x280)*(x283)))+((((IkReal)(-1.00000000000000))*(r00)*(x279)))+(((x276)*(x277)))+(((cj0)*(x282)))+(((x275)*(x277))));
evalcond[1]=((((x273)*(x278)))+((((IkReal)(-1.00000000000000))*(x276)*(x281)))+((((IkReal)(-1.00000000000000))*(x275)*(x281)))+(((sj5)*(x274)))+((((IkReal)(-1.00000000000000))*(x279)*(x282)))+(((sj0)*(x283)))+((((IkReal)(-1.00000000000000))*(r00)*(x280))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[6];
IkSingleDOFSolution_Init( vinfos, 6 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 6, vfree, 0);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
}
}
}
return IkSolutionList_GetNumSolutions(solutions)>0;
}


IKFAST_API const char* GetKinematicsHash() { return "fbf1c03411dff69733dd5dc78c12308f"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }


#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList solutions;
    IkSolutionList_Init( &solutions );
    IkReal vfree[IKFAST_NUM_FREE_VARS];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    size_t i = 0;
    for(i = 0; i < countof(vfree); ++i)
        vfree[i] = atof(argv[13+i]);
    int bSuccess = ComputeIk(eetrans, eerot, countof(vfree) > 0 ? vfree : NULL, &solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)IkSolutionList_GetNumSolutions(&solutions));
    IkReal solvalues[IKFAST_NUM_JOINTS];
    for(i = 0; i < IkSolutionList_GetNumSolutions(&solutions); ++i) 
    {
        int sol_count;
        int free_count;
        IkSolution * sol = IkSolutionList_GetSolution(&solutions, i);
        IkSolution_GetSolution(sol, solvalues, &sol_count, vfree);
        const int *vsolfree = IkSolution_GetFree( sol, &free_count );
        printf("sol%d (free=%d): ", i, free_count);
        size_t j = 0;
        for( j = 0; j < sol_count; ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
