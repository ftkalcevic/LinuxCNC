/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// C version for linuxcnc adapted by \author Frank Tkalcevic
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2013-12-12 13:35:54.967529
///
///    /usr/local/bin/openrave.py --database inversekinematics --robot=../simple.robot.xml --iktype=Translation3D --freejoint=Wrist --freejoint=WristR --outputlang=c 
///
/// To compile with gcc:
///     gcc ik.c -lm
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp

#define IKFAST_HAS_LIBRARY
#define IKFAST_NUM_DOF 4
#define IKFAST_NUM_JOINTS 5
#define IKFAST_NUM_FREE_VARS 2

// For a standalone binary
#ifndef IKFAST_NO_MAIN
    #define j0 math_h_j0
    #define j1 math_h_j1

    #include <math.h>
    #include <complex.h>
    #include <stdlib.h>
    #include <stdio.h>

    #undef j0
    #undef j1

    #define rtapi_exit  exit
    #define rtapi_print printf
#endif

#include "ikfast_c.h" // found inside share/openrave-X.Y/python/ikfast_c.h

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { rtapi_print( "ikfast exception: " __FILE__ ":" IKFAST_STRINGIZE(__LINE__) ": " IKFAST_STRINGIZE(_PRETTY_FUNCTION__) ": Assertion '"  #b "' failed" ); rtapi_exit(-1); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_ (const int* m, const int* n, double complex * a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);


static inline double IKabs(double f) { return fabs(f); }

static inline double IKsqr(double f) { return f*f; }

static inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

static inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
static inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

static inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
static inline double IKsin(double f) { return sin(f); }
static inline double IKcos(double f) { return cos(f); }
static inline double IKtan(double f) { return tan(f); }
static inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
static inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}


static inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

// Forward declaration even if they aren't used
static inline void polyroots1(IkReal rawcoeffs[1+1], IkReal rawroots[1], int *numroots );
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int *numroots );
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int *numroots );
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int *numroots );
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int *numroots );
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int *numroots );
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int *numroots );
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int *numroots );


static const struct JointInfo
{
    double limitMin;
    double limitMax;
} JointInfo[] =
{
{ .limitMin=-180.0, .limitMax=180.0 },
{ .limitMin=-130.0, .limitMax=136.0 },
{ .limitMin=-126.0, .limitMax=156.0 },
{ .limitMin=-130.0, .limitMax=157.0 },
{ .limitMin=-180.0, .limitMax=180.0 },
};
static IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
static unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[2]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[0]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=(((IkReal)(0.0700000000000000))*(x4));
x9=(((IkReal)(0.0700000000000000))*(x2));
x10=(((IkReal)(0.120000000000000))*(x3));
x11=(((IkReal)(0.120000000000000))*(x4));
x12=(((IkReal)(0.120000000000000))*(x1));
x13=((x3)*(x5));
x14=((x0)*(x1));
x15=((x0)*(x3));
x16=(((IkReal)(0.0700000000000000))*(x1)*(x5));
x17=((x12)*(x2));
eetrans[0]=((((x0)*(x17)))+(((x7)*((((((IkReal)(-1.00000000000000))*(x14)*(x8)))+(((x15)*(x9)))))))+(((x6)*(((((x14)*(x9)))+(((x15)*(x8)))))))+(((x0)*(x12)))+(((x0)*(x10)*(x4))));
IkReal x18=((x1)*(x5));
eetrans[1]=((((x6)*(((((x13)*(x8)))+(((x18)*(x9)))))))+(((x10)*(x4)*(x5)))+(((x12)*(x5)))+(((x7)*(((((x13)*(x9)))+((((IkReal)(-1.00000000000000))*(x18)*(x8)))))))+(((x17)*(x5))));
IkReal x19=(((IkReal)(1.00000000000000))*(x1));
eetrans[2]=(((IkReal)(0.169900000000000))+(((x6)*((((((IkReal)(-1.00000000000000))*(x19)*(x8)))+(((x3)*(x9)))))))+((((IkReal)(-1.00000000000000))*(x11)*(x19)))+(x10)+(((x10)*(x2)))+(((x7)*((((((IkReal)(-1.00000000000000))*(x19)*(x9)))+((((IkReal)(-1.00000000000000))*(x3)*(x8))))))));
}

IKFAST_API int GetNumFreeParameters() { return 2; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3, 4}; return freeparams; }
IKFAST_API int GetNumJoints() { return IKFAST_NUM_JOINTS; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

int ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionList * solutions) {
j0=NAN; _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=NAN; _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=NAN; _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0; 
int dummyiter;
for(dummyiter = 0; dummyiter < 1; ++dummyiter) {
    IkSolutionList_Clear(solutions);
j3=pfree[0]; cj3=cos(pfree[0]); sj3=sin(pfree[0]);
j4=pfree[1]; cj4=cos(pfree[1]); sj4=sin(pfree[1]);
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=py;
new_pz=(((IkReal)(-0.169900000000000))+(pz));
px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((pz)*(pz))+((py)*(py)));
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs((((IkReal)(-1.00000000000000))*(py))) < IKFAST_ATAN2_MAGTHRESH && IKabs(px) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x20=IKatan2((((IkReal)(-1.00000000000000))*(py)), px);
j0array[0]=(((IkReal)(-1.00000000000000))*(x20));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=(((IkReal)(3.14159265358979))+((((IkReal)(-1.00000000000000))*(x20))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
int ij0;
for(ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
int iij0;
for(iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
dummyeval[0]=(((IkReal)(2.93877551020408))+((cj3)*(cj3))+((sj3)*(sj3))+((((IkReal)(3.42857142857143))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((IkReal)(2.93877551020408))+((cj3)*(cj3))+((sj3)*(sj3))+((((IkReal)(3.42857142857143))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((((py)*(py))*((sj0)*(sj0))))+((((cj0)*(cj0))*((px)*(px))))+((pz)*(pz))+((((IkReal)(2.00000000000000))*(cj0)*(px)*(py)*(sj0))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x21=(((((IkReal)(0.240000000000000))*(cj0)*(px)))+((((IkReal)(0.240000000000000))*(py)*(sj0))));
if( IKabs((((IkReal)(0.240000000000000))*(pz))) < IKFAST_ATAN2_MAGTHRESH && IKabs(x21) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x22=(((IkReal)(1.00000000000000))*(IKatan2((((IkReal)(0.240000000000000))*(pz)), x21)));
if( ((((((IkReal)(0.0576000000000000))*((pz)*(pz))))+((x21)*(x21)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((((IkReal)(0.0576000000000000))*((pz)*(pz))))+((x21)*(x21)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((((IkReal)(0.0576000000000000))*((pz)*(pz))))+((x21)*(x21))))))):(IkReal)1.0e30))*((((IkReal)(0.00490000000000000))+((((IkReal)(-1.00000000000000))*(pp)))+((((IkReal)(0.0168000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((((IkReal)(0.0576000000000000))*((pz)*(pz))))+((x21)*(x21)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((((IkReal)(0.0576000000000000))*((pz)*(pz))))+((x21)*(x21))))))):(IkReal)1.0e30))*((((IkReal)(0.00490000000000000))+((((IkReal)(-1.00000000000000))*(pp)))+((((IkReal)(0.0168000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x23=IKasin(((((IKabs(IKabs(IKsqrt((((((IkReal)(0.0576000000000000))*((pz)*(pz))))+((x21)*(x21)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((((IkReal)(0.0576000000000000))*((pz)*(pz))))+((x21)*(x21))))))):(IkReal)1.0e30))*((((IkReal)(0.00490000000000000))+((((IkReal)(-1.00000000000000))*(pp)))+((((IkReal)(0.0168000000000000))*(cj3)))))));
j1array[0]=(((((IkReal)(-1.00000000000000))*(x23)))+((((IkReal)(-1.00000000000000))*(x22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=(((IkReal)(3.14159265358979))+(x23)+((((IkReal)(-1.00000000000000))*(x22))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
int ij1;
for(ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign((((IkReal)(432.000000000000))+((((IkReal)(504.000000000000))*(cj3)))+((((IkReal)(147.000000000000))*((sj3)*(sj3))))+((((IkReal)(147.000000000000))*((cj3)*(cj3))))));
dummyeval[0]=(((IkReal)(2.93877551020408))+((cj3)*(cj3))+((sj3)*(sj3))+((((IkReal)(3.42857142857143))*(cj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((IkReal)(-144.000000000000))+((((IkReal)(-168.000000000000))*(cj3)))+((((IkReal)(-49.0000000000000))*((cj3)*(cj3))))+((((IkReal)(-49.0000000000000))*((sj3)*(sj3))))));
dummyeval[0]=(((IkReal)(-2.93877551020408))+((((IkReal)(-1.00000000000000))*((cj3)*(cj3))))+((((IkReal)(-3.42857142857143))*(cj3)))+((((IkReal)(-1.00000000000000))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x24=(((IkReal)(700.000000000000))*(sj1));
IkReal x25=(((IkReal)(700.000000000000))*(cj1));
IkReal x26=(((IkReal)(1200.00000000000))*(sj1));
IkReal x27=((cj0)*(px));
IkReal x28=(((IkReal)(1200.00000000000))*(cj1));
IkReal x29=((py)*(sj0));
IkReal x30=((pz)*(x25));
IkReal x31=((sj3)*(x29));
IkReal x32=((cj3)*(x27));
if( IKabs(((gconst1)*(((((x24)*(x31)))+((((IkReal)(-1.00000000000000))*(cj3)*(x25)*(x29)))+((((IkReal)(-1.00000000000000))*(x28)*(x29)))+(((pz)*(x26)))+(((sj3)*(x24)*(x27)))+((((IkReal)(-1.00000000000000))*(x27)*(x28)))+((((IkReal)(-84.0000000000000))*(sj3)))+((((IkReal)(-1.00000000000000))*(x25)*(x32)))+(((cj3)*(pz)*(x24)))+(((sj3)*(x30))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*((((IkReal)(144.000000000000))+(((pz)*(sj3)*(x24)))+((((IkReal)(-1.00000000000000))*(pz)*(x28)))+((((IkReal)(-1.00000000000000))*(x25)*(x31)))+((((IkReal)(-1.00000000000000))*(x26)*(x27)))+((((IkReal)(-1.00000000000000))*(x26)*(x29)))+((((IkReal)(-1.00000000000000))*(cj3)*(x24)*(x29)))+((((IkReal)(-1.00000000000000))*(x24)*(x32)))+((((IkReal)(-1.00000000000000))*(sj3)*(x25)*(x27)))+((((IkReal)(-1.00000000000000))*(cj3)*(x30)))+((((IkReal)(84.0000000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst1)*(((((x24)*(x31)))+((((IkReal)(-1.00000000000000))*(cj3)*(x25)*(x29)))+((((IkReal)(-1.00000000000000))*(x28)*(x29)))+(((pz)*(x26)))+(((sj3)*(x24)*(x27)))+((((IkReal)(-1.00000000000000))*(x27)*(x28)))+((((IkReal)(-84.0000000000000))*(sj3)))+((((IkReal)(-1.00000000000000))*(x25)*(x32)))+(((cj3)*(pz)*(x24)))+(((sj3)*(x30)))))), ((gconst1)*((((IkReal)(144.000000000000))+(((pz)*(sj3)*(x24)))+((((IkReal)(-1.00000000000000))*(pz)*(x28)))+((((IkReal)(-1.00000000000000))*(x25)*(x31)))+((((IkReal)(-1.00000000000000))*(x26)*(x27)))+((((IkReal)(-1.00000000000000))*(x26)*(x29)))+((((IkReal)(-1.00000000000000))*(cj3)*(x24)*(x29)))+((((IkReal)(-1.00000000000000))*(x24)*(x32)))+((((IkReal)(-1.00000000000000))*(sj3)*(x25)*(x27)))+((((IkReal)(-1.00000000000000))*(cj3)*(x30)))+((((IkReal)(84.0000000000000))*(cj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
int ij2;
for(ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
int iij2;
for(iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x33=IKcos(j2);
IkReal x34=IKsin(j2);
IkReal x35=((cj0)*(px));
IkReal x36=(((IkReal)(0.0700000000000000))*(cj3));
IkReal x37=(((IkReal)(0.0700000000000000))*(sj3));
IkReal x38=((py)*(sj0));
IkReal x39=(((IkReal)(0.120000000000000))*(cj1));
IkReal x40=(((IkReal)(0.120000000000000))*(sj1));
IkReal x41=(((IkReal)(1.00000000000000))*(cj1));
IkReal x42=(((IkReal)(0.0168000000000000))*(cj3));
IkReal x43=((cj1)*(x33));
IkReal x44=((sj1)*(x34));
IkReal x45=((cj1)*(x34));
IkReal x46=((sj1)*(x33));
evalcond[0]=(((IkReal)(0.0337000000000000))+(x42)+((((IkReal)(-0.0168000000000000))*(sj3)*(x34)))+((((IkReal)(-1.00000000000000))*(pp)))+(((x33)*(x42)))+((((IkReal)(0.0288000000000000))*(x33))));
evalcond[1]=(((IkReal)(-0.120000000000000))+((((IkReal)(-0.120000000000000))*(x33)))+(((x34)*(x37)))+(((cj1)*(pz)))+(((sj1)*(x35)))+((((IkReal)(-1.00000000000000))*(x33)*(x36)))+(((sj1)*(x38))));
evalcond[2]=((((x34)*(x36)))+((((IkReal)(0.120000000000000))*(x34)))+(((pz)*(sj1)))+((((IkReal)(-1.00000000000000))*(x35)*(x41)))+((((IkReal)(-1.00000000000000))*(x38)*(x41)))+(((x33)*(x37))));
evalcond[3]=((((x36)*(x44)))+(((x34)*(x40)))+((((IkReal)(-1.00000000000000))*(x39)))+(((x37)*(x45)))+(((x37)*(x46)))+(pz)+((((IkReal)(-1.00000000000000))*(x33)*(x39)))+((((IkReal)(-1.00000000000000))*(x36)*(x43))));
evalcond[4]=((((x33)*(x40)))+((((IkReal)(-1.00000000000000))*(x37)*(x44)))+(((x36)*(x46)))+(x40)+((((IkReal)(-1.00000000000000))*(x35)))+((((IkReal)(-1.00000000000000))*(x38)))+(((x37)*(x43)))+(((x34)*(x39)))+(((x36)*(x45))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[5];
IkSingleDOFSolution_Init( vinfos, 5 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 5, vfree, 0);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x47=(((IkReal)(8750.00000000000))*(pp));
IkReal x48=(((IkReal)(2100.00000000000))*(cj1));
IkReal x49=((cj0)*(px));
IkReal x50=((py)*(sj0));
IkReal x51=((pz)*(sj1));
IkReal x52=(((IkReal)(3600.00000000000))*(cj1));
if( IKabs(((gconst0)*((((((IkReal)(147.000000000000))*(cj3)*(sj3)))+((((IkReal)(-1.00000000000000))*(sj3)*(x47)))+((((IkReal)(-3600.00000000000))*(x51)))+(((cj3)*(x48)*(x49)))+(((cj3)*(x48)*(x50)))+((((IkReal)(-2100.00000000000))*(cj3)*(x51)))+((((IkReal)(294.875000000000))*(sj3)))+(((x49)*(x52)))+(((x50)*(x52))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*((((IkReal)(-505.500000000000))+(((sj3)*(x48)*(x49)))+((((IkReal)(15000.0000000000))*(pp)))+(((sj3)*(x48)*(x50)))+((((IkReal)(-147.000000000000))*((cj3)*(cj3))))+(((cj3)*(x47)))+((((IkReal)(-2100.00000000000))*(sj3)*(x51)))+((((IkReal)(-546.875000000000))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst0)*((((((IkReal)(147.000000000000))*(cj3)*(sj3)))+((((IkReal)(-1.00000000000000))*(sj3)*(x47)))+((((IkReal)(-3600.00000000000))*(x51)))+(((cj3)*(x48)*(x49)))+(((cj3)*(x48)*(x50)))+((((IkReal)(-2100.00000000000))*(cj3)*(x51)))+((((IkReal)(294.875000000000))*(sj3)))+(((x49)*(x52)))+(((x50)*(x52)))))), ((gconst0)*((((IkReal)(-505.500000000000))+(((sj3)*(x48)*(x49)))+((((IkReal)(15000.0000000000))*(pp)))+(((sj3)*(x48)*(x50)))+((((IkReal)(-147.000000000000))*((cj3)*(cj3))))+(((cj3)*(x47)))+((((IkReal)(-2100.00000000000))*(sj3)*(x51)))+((((IkReal)(-546.875000000000))*(cj3)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
int ij2;
for(ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
int iij2;
for(iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[5];
IkReal x53=IKcos(j2);
IkReal x54=IKsin(j2);
IkReal x55=((cj0)*(px));
IkReal x56=(((IkReal)(0.0700000000000000))*(cj3));
IkReal x57=(((IkReal)(0.0700000000000000))*(sj3));
IkReal x58=((py)*(sj0));
IkReal x59=(((IkReal)(0.120000000000000))*(cj1));
IkReal x60=(((IkReal)(0.120000000000000))*(sj1));
IkReal x61=(((IkReal)(1.00000000000000))*(cj1));
IkReal x62=(((IkReal)(0.0168000000000000))*(cj3));
IkReal x63=((cj1)*(x53));
IkReal x64=((sj1)*(x54));
IkReal x65=((cj1)*(x54));
IkReal x66=((sj1)*(x53));
evalcond[0]=(((IkReal)(0.0337000000000000))+(x62)+((((IkReal)(-0.0168000000000000))*(sj3)*(x54)))+(((x53)*(x62)))+((((IkReal)(-1.00000000000000))*(pp)))+((((IkReal)(0.0288000000000000))*(x53))));
evalcond[1]=(((IkReal)(-0.120000000000000))+(((sj1)*(x58)))+((((IkReal)(-0.120000000000000))*(x53)))+((((IkReal)(-1.00000000000000))*(x53)*(x56)))+(((sj1)*(x55)))+(((cj1)*(pz)))+(((x54)*(x57))));
evalcond[2]=(((((IkReal)(0.120000000000000))*(x54)))+((((IkReal)(-1.00000000000000))*(x58)*(x61)))+(((x54)*(x56)))+(((pz)*(sj1)))+((((IkReal)(-1.00000000000000))*(x55)*(x61)))+(((x53)*(x57))));
evalcond[3]=(((((IkReal)(-1.00000000000000))*(x59)))+(((x57)*(x66)))+(((x54)*(x60)))+((((IkReal)(-1.00000000000000))*(x53)*(x59)))+((((IkReal)(-1.00000000000000))*(x56)*(x63)))+(((x56)*(x64)))+(((x57)*(x65)))+(pz));
evalcond[4]=((((x54)*(x59)))+(x60)+((((IkReal)(-1.00000000000000))*(x55)))+(((x53)*(x60)))+(((x56)*(x66)))+((((IkReal)(-1.00000000000000))*(x58)))+((((IkReal)(-1.00000000000000))*(x57)*(x64)))+(((x57)*(x63)))+(((x56)*(x65))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[5];
IkSingleDOFSolution_Init( vinfos, 5 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 5, vfree, 0);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x67=(((IkReal)(0.0168000000000000))*(cj3));
IkReal x68=(((IkReal)(0.0288000000000000))+(x67));
if( IKabs(x68) < IKFAST_ATAN2_MAGTHRESH && IKabs((((IkReal)(-0.0168000000000000))*(sj3))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x69=(((IkReal)(1.00000000000000))*(IKatan2(x68, (((IkReal)(-0.0168000000000000))*(sj3)))));
if( ((((x68)*(x68))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x68)*(x68))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x68)*(x68))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3))))))))):(IkReal)1.0e30))*((((IkReal)(0.0337000000000000))+(x67)+((((IkReal)(-1.00000000000000))*(pp))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x68)*(x68))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x68)*(x68))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3))))))))):(IkReal)1.0e30))*((((IkReal)(0.0337000000000000))+(x67)+((((IkReal)(-1.00000000000000))*(pp))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x70=IKasin(((((IKabs(IKabs(IKsqrt((((x68)*(x68))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x68)*(x68))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3))))))))):(IkReal)1.0e30))*((((IkReal)(0.0337000000000000))+(x67)+((((IkReal)(-1.00000000000000))*(pp)))))));
j2array[0]=(((((IkReal)(-1.00000000000000))*(x70)))+((((IkReal)(-1.00000000000000))*(x69))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=(((IkReal)(3.14159265358979))+(x70)+((((IkReal)(-1.00000000000000))*(x69))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
int ij2;
for(ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
int iij2;
for(iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((((IkReal)(-12.0000000000000))*(cj0)*(px)*(py)*(sj0)))+((((IkReal)(-6.00000000000000))*((cj0)*(cj0))*((px)*(px))))+((((IkReal)(-6.00000000000000))*((pz)*(pz))))+((((IkReal)(-6.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=(((((IkReal)(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((IkReal)(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+((((IkReal)(-1.00000000000000))*((pz)*(pz))))+((((IkReal)(-1.00000000000000))*((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((((IkReal)(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((IkReal)(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+((((IkReal)(-1.00000000000000))*((pz)*(pz))))+((((IkReal)(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=(((((IkReal)(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((IkReal)(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+((((IkReal)(-1.00000000000000))*((pz)*(pz))))+((((IkReal)(-1.00000000000000))*((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x71=(((IkReal)(0.120000000000000))*(pz));
IkReal x72=(((IkReal)(0.0700000000000000))*(cj3));
IkReal x73=((cj2)*(pz));
IkReal x74=((py)*(sj0));
IkReal x75=(((IkReal)(0.0700000000000000))*(sj3));
IkReal x76=((cj0)*(px)*(sj2));
IkReal x77=(((IkReal)(0.120000000000000))*(x74));
IkReal x78=((cj0)*(cj2)*(px));
IkReal x79=((sj2)*(x75));
if( IKabs(((gconst3)*(((((x74)*(x79)))+(((sj2)*(x71)))+(((pz)*(sj2)*(x72)))+((((IkReal)(-1.00000000000000))*(x77)))+(((x73)*(x75)))+((((IkReal)(-1.00000000000000))*(cj2)*(x72)*(x74)))+(((x75)*(x76)))+((((IkReal)(-1.00000000000000))*(x72)*(x78)))+((((IkReal)(-0.120000000000000))*(x78)))+((((IkReal)(-0.120000000000000))*(cj0)*(px)))+((((IkReal)(-1.00000000000000))*(cj2)*(x77))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((pz)*(x79)))+((((IkReal)(-1.00000000000000))*(sj2)*(x77)))+((((IkReal)(-1.00000000000000))*(x72)*(x73)))+((((IkReal)(-1.00000000000000))*(cj2)*(x74)*(x75)))+((((IkReal)(-1.00000000000000))*(x75)*(x78)))+((((IkReal)(-1.00000000000000))*(cj2)*(x71)))+((((IkReal)(-0.120000000000000))*(x76)))+((((IkReal)(-1.00000000000000))*(x71)))+((((IkReal)(-1.00000000000000))*(sj2)*(x72)*(x74)))+((((IkReal)(-1.00000000000000))*(x72)*(x76))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst3)*(((((x74)*(x79)))+(((sj2)*(x71)))+(((pz)*(sj2)*(x72)))+((((IkReal)(-1.00000000000000))*(x77)))+(((x73)*(x75)))+((((IkReal)(-1.00000000000000))*(cj2)*(x72)*(x74)))+(((x75)*(x76)))+((((IkReal)(-1.00000000000000))*(x72)*(x78)))+((((IkReal)(-0.120000000000000))*(x78)))+((((IkReal)(-0.120000000000000))*(cj0)*(px)))+((((IkReal)(-1.00000000000000))*(cj2)*(x77)))))), ((gconst3)*(((((pz)*(x79)))+((((IkReal)(-1.00000000000000))*(sj2)*(x77)))+((((IkReal)(-1.00000000000000))*(x72)*(x73)))+((((IkReal)(-1.00000000000000))*(cj2)*(x74)*(x75)))+((((IkReal)(-1.00000000000000))*(x75)*(x78)))+((((IkReal)(-1.00000000000000))*(cj2)*(x71)))+((((IkReal)(-0.120000000000000))*(x76)))+((((IkReal)(-1.00000000000000))*(x71)))+((((IkReal)(-1.00000000000000))*(sj2)*(x72)*(x74)))+((((IkReal)(-1.00000000000000))*(x72)*(x76)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
int ij1;
for(ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x80=IKsin(j1);
IkReal x81=IKcos(j1);
IkReal x82=(((IkReal)(0.120000000000000))*(sj2));
IkReal x83=((cj0)*(px));
IkReal x84=(((IkReal)(0.0700000000000000))*(sj3));
IkReal x85=(((IkReal)(0.0700000000000000))*(cj3));
IkReal x86=((py)*(sj0));
IkReal x87=(((IkReal)(0.120000000000000))*(cj2));
IkReal x88=((pz)*(x81));
IkReal x89=(((IkReal)(1.00000000000000))*(x81));
IkReal x90=((cj2)*(x81));
IkReal x91=((sj2)*(x81));
IkReal x92=(((IkReal)(0.240000000000000))*(x80));
IkReal x93=((cj2)*(x80));
IkReal x94=(((IkReal)(0.0700000000000000))*(sj2)*(x80));
evalcond[0]=(((IkReal)(0.00490000000000000))+(((x83)*(x92)))+((((IkReal)(-1.00000000000000))*(pp)))+((((IkReal)(0.240000000000000))*(x88)))+(((x86)*(x92)))+((((IkReal)(0.0168000000000000))*(cj3))));
evalcond[1]=(((IkReal)(-0.120000000000000))+(((x80)*(x83)))+((((IkReal)(-1.00000000000000))*(cj2)*(x85)))+(((x80)*(x86)))+(((sj2)*(x84)))+(x88)+((((IkReal)(-1.00000000000000))*(x87))));
evalcond[2]=((((cj2)*(x84)))+((((IkReal)(-1.00000000000000))*(x83)*(x89)))+(((pz)*(x80)))+(((sj2)*(x85)))+(x82)+((((IkReal)(-1.00000000000000))*(x86)*(x89))));
evalcond[3]=(((((IkReal)(-0.120000000000000))*(x81)))+(((x80)*(x82)))+((((IkReal)(-1.00000000000000))*(x81)*(x87)))+(((x84)*(x91)))+(((x84)*(x93)))+((((IkReal)(-1.00000000000000))*(x85)*(x90)))+(pz)+(((sj2)*(x80)*(x85))));
evalcond[4]=(((((IkReal)(-1.00000000000000))*(x83)))+(((x81)*(x82)))+(((x85)*(x91)))+((((IkReal)(0.120000000000000))*(x80)))+(((x84)*(x90)))+((((IkReal)(-1.00000000000000))*(sj2)*(x80)*(x84)))+(((x85)*(x93)))+(((x80)*(x87)))+((((IkReal)(-1.00000000000000))*(x86))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[5];
IkSingleDOFSolution_Init( vinfos, 5 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 5, vfree, 0);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x95=(((IkReal)(0.720000000000000))*(sj2));
IkReal x96=(((IkReal)(0.420000000000000))*(pz));
IkReal x97=((cj2)*(sj3));
IkReal x98=((cj0)*(px));
IkReal x99=((cj3)*(sj2));
IkReal x100=(((IkReal)(25.0000000000000))*(pp));
IkReal x101=((py)*(sj0));
IkReal x102=(((IkReal)(0.420000000000000))*(x101));
IkReal x103=(((IkReal)(0.420000000000000))*(cj3)*(x98));
if( IKabs(((gconst2)*((((((IkReal)(-1.00000000000000))*(x100)*(x98)))+(((cj3)*(x102)))+(((pz)*(x95)))+((((IkReal)(0.122500000000000))*(x101)))+(((x96)*(x99)))+((((IkReal)(-1.00000000000000))*(x100)*(x101)))+(x103)+((((IkReal)(0.122500000000000))*(x98)))+(((x96)*(x97))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*((((((IkReal)(-0.420000000000000))*(x97)*(x98)))+((((IkReal)(-1.00000000000000))*(x101)*(x95)))+((((IkReal)(-0.420000000000000))*(x98)*(x99)))+((((IkReal)(-1.00000000000000))*(x102)*(x99)))+(((cj3)*(x96)))+((((IkReal)(-1.00000000000000))*(pz)*(x100)))+((((IkReal)(-1.00000000000000))*(x102)*(x97)))+((((IkReal)(-1.00000000000000))*(x95)*(x98)))+((((IkReal)(0.122500000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst2)*((((((IkReal)(-1.00000000000000))*(x100)*(x98)))+(((cj3)*(x102)))+(((pz)*(x95)))+((((IkReal)(0.122500000000000))*(x101)))+(((x96)*(x99)))+((((IkReal)(-1.00000000000000))*(x100)*(x101)))+(x103)+((((IkReal)(0.122500000000000))*(x98)))+(((x96)*(x97)))))), ((gconst2)*((((((IkReal)(-0.420000000000000))*(x97)*(x98)))+((((IkReal)(-1.00000000000000))*(x101)*(x95)))+((((IkReal)(-0.420000000000000))*(x98)*(x99)))+((((IkReal)(-1.00000000000000))*(x102)*(x99)))+(((cj3)*(x96)))+((((IkReal)(-1.00000000000000))*(pz)*(x100)))+((((IkReal)(-1.00000000000000))*(x102)*(x97)))+((((IkReal)(-1.00000000000000))*(x95)*(x98)))+((((IkReal)(0.122500000000000))*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
int ij1;
for(ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x104=IKsin(j1);
IkReal x105=IKcos(j1);
IkReal x106=(((IkReal)(0.120000000000000))*(sj2));
IkReal x107=((cj0)*(px));
IkReal x108=(((IkReal)(0.0700000000000000))*(sj3));
IkReal x109=(((IkReal)(0.0700000000000000))*(cj3));
IkReal x110=((py)*(sj0));
IkReal x111=(((IkReal)(0.120000000000000))*(cj2));
IkReal x112=((pz)*(x105));
IkReal x113=(((IkReal)(1.00000000000000))*(x105));
IkReal x114=((cj2)*(x105));
IkReal x115=((sj2)*(x105));
IkReal x116=(((IkReal)(0.240000000000000))*(x104));
IkReal x117=((cj2)*(x104));
IkReal x118=(((IkReal)(0.0700000000000000))*(sj2)*(x104));
evalcond[0]=(((IkReal)(0.00490000000000000))+(((x110)*(x116)))+(((x107)*(x116)))+((((IkReal)(-1.00000000000000))*(pp)))+((((IkReal)(0.240000000000000))*(x112)))+((((IkReal)(0.0168000000000000))*(cj3))));
evalcond[1]=(((IkReal)(-0.120000000000000))+(((x104)*(x107)))+(((x104)*(x110)))+((((IkReal)(-1.00000000000000))*(x111)))+(((sj2)*(x108)))+(x112)+((((IkReal)(-1.00000000000000))*(cj2)*(x109))));
evalcond[2]=(((((IkReal)(-1.00000000000000))*(x110)*(x113)))+(((pz)*(x104)))+((((IkReal)(-1.00000000000000))*(x107)*(x113)))+(((sj2)*(x109)))+(x106)+(((cj2)*(x108))));
evalcond[3]=(((((IkReal)(-0.120000000000000))*(x105)))+((((IkReal)(-1.00000000000000))*(x109)*(x114)))+(((x108)*(x117)))+(((sj2)*(x104)*(x109)))+(((x108)*(x115)))+(((x104)*(x106)))+(pz)+((((IkReal)(-1.00000000000000))*(x105)*(x111))));
evalcond[4]=(((((IkReal)(-1.00000000000000))*(sj2)*(x104)*(x108)))+(((x108)*(x114)))+(((x104)*(x111)))+(((x109)*(x117)))+(((x105)*(x106)))+(((x109)*(x115)))+((((IkReal)(0.120000000000000))*(x104)))+((((IkReal)(-1.00000000000000))*(x110)))+((((IkReal)(-1.00000000000000))*(x107))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[5];
IkSingleDOFSolution_Init( vinfos, 5 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 5, vfree, 0);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x119=(((IkReal)(0.0168000000000000))*(cj3));
IkReal x120=(((IkReal)(0.0288000000000000))+(x119));
if( IKabs(x120) < IKFAST_ATAN2_MAGTHRESH && IKabs((((IkReal)(-0.0168000000000000))*(sj3))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x121=(((IkReal)(1.00000000000000))*(IKatan2(x120, (((IkReal)(-0.0168000000000000))*(sj3)))));
if( ((((x120)*(x120))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((x120)*(x120))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x120)*(x120))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3))))))))):(IkReal)1.0e30))*((((IkReal)(0.0337000000000000))+((((IkReal)(-1.00000000000000))*(pp)))+(x119))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((x120)*(x120))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x120)*(x120))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3))))))))):(IkReal)1.0e30))*((((IkReal)(0.0337000000000000))+((((IkReal)(-1.00000000000000))*(pp)))+(x119))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x122=IKasin(((((IKabs(IKabs(IKsqrt((((x120)*(x120))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x120)*(x120))+((((IkReal)(0.000282240000000000))*((sj3)*(sj3))))))))):(IkReal)1.0e30))*((((IkReal)(0.0337000000000000))+((((IkReal)(-1.00000000000000))*(pp)))+(x119)))));
j2array[0]=(((((IkReal)(-1.00000000000000))*(x122)))+((((IkReal)(-1.00000000000000))*(x121))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=(((IkReal)(3.14159265358979))+(x122)+((((IkReal)(-1.00000000000000))*(x121))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
int ij2;
for(ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
int iij2;
for(iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign((((((IkReal)(-12.0000000000000))*(cj0)*(px)*(py)*(sj0)))+((((IkReal)(-6.00000000000000))*((cj0)*(cj0))*((px)*(px))))+((((IkReal)(-6.00000000000000))*((pz)*(pz))))+((((IkReal)(-6.00000000000000))*((py)*(py))*((sj0)*(sj0))))));
dummyeval[0]=(((((IkReal)(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((IkReal)(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+((((IkReal)(-1.00000000000000))*((pz)*(pz))))+((((IkReal)(-1.00000000000000))*((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((((IkReal)(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((IkReal)(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+((((IkReal)(-1.00000000000000))*((pz)*(pz))))+((((IkReal)(-1.00000000000000))*((cj0)*(cj0))*((px)*(px))))));
dummyeval[0]=(((((IkReal)(-2.00000000000000))*(cj0)*(px)*(py)*(sj0)))+((((IkReal)(-1.00000000000000))*((py)*(py))*((sj0)*(sj0))))+((((IkReal)(-1.00000000000000))*((pz)*(pz))))+((((IkReal)(-1.00000000000000))*((cj0)*(cj0))*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x123=(((IkReal)(0.120000000000000))*(pz));
IkReal x124=(((IkReal)(0.0700000000000000))*(cj3));
IkReal x125=((cj2)*(pz));
IkReal x126=((py)*(sj0));
IkReal x127=(((IkReal)(0.0700000000000000))*(sj3));
IkReal x128=((cj0)*(px)*(sj2));
IkReal x129=(((IkReal)(0.120000000000000))*(x126));
IkReal x130=((cj0)*(cj2)*(px));
IkReal x131=((sj2)*(x127));
if( IKabs(((gconst3)*((((((IkReal)(-1.00000000000000))*(cj2)*(x124)*(x126)))+((((IkReal)(-0.120000000000000))*(x130)))+((((IkReal)(-1.00000000000000))*(x129)))+(((x126)*(x131)))+(((x125)*(x127)))+(((pz)*(sj2)*(x124)))+(((x127)*(x128)))+(((sj2)*(x123)))+((((IkReal)(-1.00000000000000))*(cj2)*(x129)))+((((IkReal)(-1.00000000000000))*(x124)*(x130)))+((((IkReal)(-0.120000000000000))*(cj0)*(px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*((((((IkReal)(-1.00000000000000))*(sj2)*(x124)*(x126)))+(((pz)*(x131)))+((((IkReal)(-1.00000000000000))*(sj2)*(x129)))+((((IkReal)(-1.00000000000000))*(x127)*(x130)))+((((IkReal)(-1.00000000000000))*(cj2)*(x123)))+((((IkReal)(-0.120000000000000))*(x128)))+((((IkReal)(-1.00000000000000))*(x124)*(x128)))+((((IkReal)(-1.00000000000000))*(cj2)*(x126)*(x127)))+((((IkReal)(-1.00000000000000))*(x123)))+((((IkReal)(-1.00000000000000))*(x124)*(x125))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst3)*((((((IkReal)(-1.00000000000000))*(cj2)*(x124)*(x126)))+((((IkReal)(-0.120000000000000))*(x130)))+((((IkReal)(-1.00000000000000))*(x129)))+(((x126)*(x131)))+(((x125)*(x127)))+(((pz)*(sj2)*(x124)))+(((x127)*(x128)))+(((sj2)*(x123)))+((((IkReal)(-1.00000000000000))*(cj2)*(x129)))+((((IkReal)(-1.00000000000000))*(x124)*(x130)))+((((IkReal)(-0.120000000000000))*(cj0)*(px)))))), ((gconst3)*((((((IkReal)(-1.00000000000000))*(sj2)*(x124)*(x126)))+(((pz)*(x131)))+((((IkReal)(-1.00000000000000))*(sj2)*(x129)))+((((IkReal)(-1.00000000000000))*(x127)*(x130)))+((((IkReal)(-1.00000000000000))*(cj2)*(x123)))+((((IkReal)(-0.120000000000000))*(x128)))+((((IkReal)(-1.00000000000000))*(x124)*(x128)))+((((IkReal)(-1.00000000000000))*(cj2)*(x126)*(x127)))+((((IkReal)(-1.00000000000000))*(x123)))+((((IkReal)(-1.00000000000000))*(x124)*(x125)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
int ij1;
for(ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x132=IKsin(j1);
IkReal x133=IKcos(j1);
IkReal x134=(((IkReal)(0.120000000000000))*(sj2));
IkReal x135=((cj0)*(px));
IkReal x136=(((IkReal)(0.0700000000000000))*(sj3));
IkReal x137=(((IkReal)(0.0700000000000000))*(cj3));
IkReal x138=((py)*(sj0));
IkReal x139=(((IkReal)(0.120000000000000))*(cj2));
IkReal x140=((pz)*(x133));
IkReal x141=(((IkReal)(1.00000000000000))*(x133));
IkReal x142=((cj2)*(x133));
IkReal x143=((sj2)*(x133));
IkReal x144=(((IkReal)(0.240000000000000))*(x132));
IkReal x145=((cj2)*(x132));
IkReal x146=(((IkReal)(0.0700000000000000))*(sj2)*(x132));
evalcond[0]=(((IkReal)(0.00490000000000000))+((((IkReal)(-1.00000000000000))*(pp)))+(((x138)*(x144)))+(((x135)*(x144)))+((((IkReal)(0.240000000000000))*(x140)))+((((IkReal)(0.0168000000000000))*(cj3))));
evalcond[1]=(((IkReal)(-0.120000000000000))+(((x132)*(x135)))+((((IkReal)(-1.00000000000000))*(x139)))+((((IkReal)(-1.00000000000000))*(cj2)*(x137)))+(((x132)*(x138)))+(x140)+(((sj2)*(x136))));
evalcond[2]=(((((IkReal)(-1.00000000000000))*(x135)*(x141)))+(((pz)*(x132)))+(((sj2)*(x137)))+(x134)+(((cj2)*(x136)))+((((IkReal)(-1.00000000000000))*(x138)*(x141))));
evalcond[3]=((((x136)*(x145)))+((((IkReal)(-0.120000000000000))*(x133)))+(((sj2)*(x132)*(x137)))+(((x136)*(x143)))+((((IkReal)(-1.00000000000000))*(x133)*(x139)))+(((x132)*(x134)))+(pz)+((((IkReal)(-1.00000000000000))*(x137)*(x142))));
evalcond[4]=(((((IkReal)(-1.00000000000000))*(x135)))+(((x133)*(x134)))+(((x136)*(x142)))+(((x137)*(x145)))+((((IkReal)(-1.00000000000000))*(x138)))+((((IkReal)(0.120000000000000))*(x132)))+(((x137)*(x143)))+(((x132)*(x139)))+((((IkReal)(-1.00000000000000))*(sj2)*(x132)*(x136))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[5];
IkSingleDOFSolution_Init( vinfos, 5 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 5, vfree, 0);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x147=(((IkReal)(0.720000000000000))*(sj2));
IkReal x148=(((IkReal)(0.420000000000000))*(pz));
IkReal x149=((cj2)*(sj3));
IkReal x150=((cj0)*(px));
IkReal x151=((cj3)*(sj2));
IkReal x152=(((IkReal)(25.0000000000000))*(pp));
IkReal x153=((py)*(sj0));
IkReal x154=(((IkReal)(0.420000000000000))*(x153));
IkReal x155=(((IkReal)(0.420000000000000))*(cj3)*(x150));
if( IKabs(((gconst2)*((((((IkReal)(0.122500000000000))*(x150)))+((((IkReal)(-1.00000000000000))*(x152)*(x153)))+(x155)+(((x148)*(x151)))+(((x148)*(x149)))+(((cj3)*(x154)))+(((pz)*(x147)))+((((IkReal)(0.122500000000000))*(x153)))+((((IkReal)(-1.00000000000000))*(x150)*(x152))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*((((((IkReal)(-1.00000000000000))*(pz)*(x152)))+((((IkReal)(-0.420000000000000))*(x150)*(x151)))+((((IkReal)(-1.00000000000000))*(x147)*(x150)))+((((IkReal)(-1.00000000000000))*(x147)*(x153)))+((((IkReal)(-1.00000000000000))*(x149)*(x154)))+((((IkReal)(-1.00000000000000))*(x151)*(x154)))+((((IkReal)(-0.420000000000000))*(x149)*(x150)))+(((cj3)*(x148)))+((((IkReal)(0.122500000000000))*(pz))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst2)*((((((IkReal)(0.122500000000000))*(x150)))+((((IkReal)(-1.00000000000000))*(x152)*(x153)))+(x155)+(((x148)*(x151)))+(((x148)*(x149)))+(((cj3)*(x154)))+(((pz)*(x147)))+((((IkReal)(0.122500000000000))*(x153)))+((((IkReal)(-1.00000000000000))*(x150)*(x152)))))), ((gconst2)*((((((IkReal)(-1.00000000000000))*(pz)*(x152)))+((((IkReal)(-0.420000000000000))*(x150)*(x151)))+((((IkReal)(-1.00000000000000))*(x147)*(x150)))+((((IkReal)(-1.00000000000000))*(x147)*(x153)))+((((IkReal)(-1.00000000000000))*(x149)*(x154)))+((((IkReal)(-1.00000000000000))*(x151)*(x154)))+((((IkReal)(-0.420000000000000))*(x149)*(x150)))+(((cj3)*(x148)))+((((IkReal)(0.122500000000000))*(pz)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
int ij1;
for(ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
int iij1;
for(iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x156=IKsin(j1);
IkReal x157=IKcos(j1);
IkReal x158=(((IkReal)(0.120000000000000))*(sj2));
IkReal x159=((cj0)*(px));
IkReal x160=(((IkReal)(0.0700000000000000))*(sj3));
IkReal x161=(((IkReal)(0.0700000000000000))*(cj3));
IkReal x162=((py)*(sj0));
IkReal x163=(((IkReal)(0.120000000000000))*(cj2));
IkReal x164=((pz)*(x157));
IkReal x165=(((IkReal)(1.00000000000000))*(x157));
IkReal x166=((cj2)*(x157));
IkReal x167=((sj2)*(x157));
IkReal x168=(((IkReal)(0.240000000000000))*(x156));
IkReal x169=((cj2)*(x156));
IkReal x170=(((IkReal)(0.0700000000000000))*(sj2)*(x156));
evalcond[0]=(((IkReal)(0.00490000000000000))+((((IkReal)(-1.00000000000000))*(pp)))+(((x159)*(x168)))+((((IkReal)(0.240000000000000))*(x164)))+(((x162)*(x168)))+((((IkReal)(0.0168000000000000))*(cj3))));
evalcond[1]=(((IkReal)(-0.120000000000000))+((((IkReal)(-1.00000000000000))*(cj2)*(x161)))+(((sj2)*(x160)))+(((x156)*(x159)))+(((x156)*(x162)))+(x164)+((((IkReal)(-1.00000000000000))*(x163))));
evalcond[2]=((x158)+(((sj2)*(x161)))+(((pz)*(x156)))+(((cj2)*(x160)))+((((IkReal)(-1.00000000000000))*(x159)*(x165)))+((((IkReal)(-1.00000000000000))*(x162)*(x165))));
evalcond[3]=((((x156)*(x158)))+(((x160)*(x169)))+((((IkReal)(-0.120000000000000))*(x157)))+((((IkReal)(-1.00000000000000))*(x157)*(x163)))+(pz)+(((sj2)*(x156)*(x161)))+(((x160)*(x167)))+((((IkReal)(-1.00000000000000))*(x161)*(x166))));
evalcond[4]=((((x161)*(x167)))+((((IkReal)(-1.00000000000000))*(sj2)*(x156)*(x160)))+((((IkReal)(-1.00000000000000))*(x162)))+(((x157)*(x158)))+(((x161)*(x169)))+(((x156)*(x163)))+((((IkReal)(-1.00000000000000))*(x159)))+(((x160)*(x166)))+((((IkReal)(0.120000000000000))*(x156))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

{
IkSingleDOFSolution vinfos[5];
IkSingleDOFSolution_Init( vinfos, 5 );
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
int vfree[0];
IkSolutionList_AddSolution(solutions, vinfos, 5, vfree, 0);
}
}
}

}

}
}
}

}

}
}
}
}
return IkSolutionList_GetNumSolutions(solutions)>0;
}


IKFAST_API const char* GetKinematicsHash() { return "587828202130adcfd9bfdcd543fb17e2"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }


#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList solutions;
    IkSolutionList_Init( &solutions );
    IkReal vfree[IKFAST_NUM_FREE_VARS];
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    size_t i = 0;
    for(i = 0; i < countof(vfree); ++i)
        vfree[i] = atof(argv[13+i]);
    int bSuccess = ComputeIk(eetrans, eerot, countof(vfree) > 0 ? vfree : NULL, &solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)IkSolutionList_GetNumSolutions(&solutions));
    IkReal solvalues[IKFAST_NUM_JOINTS];
    for(i = 0; i < IkSolutionList_GetNumSolutions(&solutions); ++i) 
    {
        int sol_count;
        int free_count;
        IkSolution * sol = IkSolutionList_GetSolution(&solutions, i);
        IkSolution_GetSolution(sol, solvalues, &sol_count, vfree);
        const int *vsolfree = IkSolution_GetFree( sol, &free_count );
        printf("sol%d (free=%d): ", i, free_count);
        size_t j = 0;
        for( j = 0; j < sol_count; ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
